<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.leozzy.com/"/>
  <updated>2017-12-05T03:23:23.899Z</updated>
  <id>http://www.leozzy.com/</id>
  
  <author>
    <name>Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RandomAccess这个空架子有何用？</title>
    <link href="http://www.leozzy.com/2017/12/05/RandomAccess%E8%BF%99%E4%B8%AA%E7%A9%BA%E6%9E%B6%E5%AD%90%E6%9C%89%E4%BD%95%E7%94%A8%EF%BC%9F/"/>
    <id>http://www.leozzy.com/2017/12/05/RandomAccess这个空架子有何用？/</id>
    <published>2017-12-04T20:50:49.000Z</published>
    <updated>2017-12-05T03:23:23.899Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 <code>Java</code> 集合时， 最先学习的便是 <code>List</code> 中的 <code>ArrayList</code> 和 <code>LinkedList</code>， 学习集合很关键的是学习其源码， 了解底层实现方式， 那么今天就讲讲 <code>ArrayList</code> 实现的一个接口 <code>RandomAccess</code>。</p>
<a id="more"></a>
<h2 id="好奇心的产生"><a href="#好奇心的产生" class="headerlink" title="好奇心的产生"></a>好奇心的产生</h2><p>查看 <code>ArrayList</code> 的源码， 发现它实现了 <code>RandomAccess</code> 这个接口， 出于好奇点进去看看， 结果发现这接口是空的， 这当然引发了更大的好奇心：这空架子到底有何用？</p>
<p><img src="https://i.imgur.com/0C0uSfJ.png" alt=""></p>
<h2 id="深入探究"><a href="#深入探究" class="headerlink" title="深入探究"></a>深入探究</h2><p>JDK 官方文档是不可少的工具， 先看看它是怎么说的：<code>RandomAccess</code> 是 <code>List</code> 实现所使用的<strong>标记接口</strong>，用来表明其<strong>支持快速（通常是固定时间）随机访问</strong>。此接口的主要目的是允许一般的算法更改其行为，从而在将其应用到随机或连续访问列表时能提供良好的性能。</p>
<p>标记接口（Marker）：这就说明了 <code>RandomAccess</code> 为空的原因，这个接口的功能仅仅起到标记的作用。</p>
<p>这不是与序列化接口 <code>Serializable</code> 差不多吗？ 只要你认真观察， 其实不只这一个标记接口， 实际上 <code>ArrayList</code> 还实现了另外两个这样的空接口：</p>
<p><code>Cloneable</code> 接口 ：实现了 <code>Cloneable</code> 接口，以指示 <code>Object.clone()</code> 方法可以合法地对该类实例进行<strong>按字段复制</strong>。 如果在没有实现 <code>Cloneable</code> 接口的实例上调用 <code>Object</code> 的 <code>clone</code> 方法，则会导致抛出 <code>CloneNotSupportedException</code> 异常。 </p>
<p><code>Serializable</code> 接口： 类通过实现 <code>java.io.Serializable</code> 接口以<strong>启用其序列化功能</strong>。未实现此接口的类将无法使其任何状态序列化或反序列化。</p>
<h2 id="继续探讨"><a href="#继续探讨" class="headerlink" title="继续探讨"></a>继续探讨</h2><p>标记接口都有什么作用呢？ 继续讨论 RandomAccess 的作用，其他两个在此不作讨论。</p>
<p>如果 <code>List</code> 子类实现了 <code>RandomAccess</code> 接口，那表示它能快速随机访问存储的元素， 这时候你想到的可能是数组， 通过下标 <code>index</code> 访问， 实现了该接口的 <code>ArrayList</code> 底层实现就是数组， 同样是通过下标访问， 只是我们需要用 <code>get()</code> 方法的形式 ， <code>ArrayList</code> 底层仍然是数组的访问形式。</p>
<p>同时你应该想到链表， <code>LinkedList</code> 底层实现是链表， <code>LinkedList</code> 没有实现 <code>RandomAccess</code> 接口，发现这一点就是突破问题的关键点。</p>
<p>数组支持随机访问， 查询速度快， 增删元素慢； 链表支持顺序访问， 查询速度慢， 增删元素快。所以对应的 <code>ArrayList</code> 查询速度快，<code>LinkedList</code> 查询速度慢， <code>RandomAccess</code> 这个标记接口就是标记能够随机访问元素的集合， 简单来说就是底层是数组实现的集合。</p>
<p>为了提升性能，在遍历集合前，我们便可以通过 <code>instanceof</code>  做判断， 选择合适的集合遍历方式，当数据量很大时， 就能大大提升性能。</p>
<p>随机访问列表使用循环遍历，顺序访问列表使用迭代器遍历。</p>
<p>先看看 <code>RandomAccess</code> 的使用方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(List list)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess)&#123;</div><div class="line">            System.out.println(<span class="string">"实现了RandomAccess接口，不使用迭代器"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; list.size();i++)&#123;</div><div class="line">                System.out.println(list.get(i));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            System.out.println(<span class="string">"没实现RandomAccess接口，使用迭代器"</span>);</div><div class="line"></div><div class="line">            Iterator it = list.iterator();</div><div class="line">            <span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">                System.out.println(it.next());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        arrayList.add(<span class="string">"a"</span>);</div><div class="line">        arrayList.add(<span class="string">"b"</span>);</div><div class="line">        traverse(arrayList);</div><div class="line"></div><div class="line">        List&lt;String&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        linkedList.add(<span class="string">"c"</span>);</div><div class="line">        linkedList.add(<span class="string">"d"</span>);</div><div class="line">        traverse(linkedList);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们加入大量数据进行性能测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessTimeTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//使用for循环遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">traverseByLoop</span><span class="params">(List list)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; list.size();i++)&#123;</div><div class="line">            list.get(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">return</span> endTime-startTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//使用迭代器遍历</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">traverseByIterator</span><span class="params">(List list)</span></span>&#123;</div><div class="line">        Iterator iterator = list.iterator();</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            iterator.next();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">return</span> endTime-startTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//加入数据</span></div><div class="line">        List&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">30000</span>;i++)&#123;</div><div class="line">            arrayList.add(<span class="string">""</span> + i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> loopTime = RandomAccessTimeTest.traverseByLoop(arrayList);</div><div class="line">        <span class="keyword">long</span> iteratorTime = RandomAccessTimeTest.traverseByIterator(arrayList);</div><div class="line">        System.out.println(<span class="string">"ArrayList:"</span>);</div><div class="line">        System.out.println(<span class="string">"for循环遍历时间:"</span> + loopTime);</div><div class="line">        System.out.println(<span class="string">"迭代器遍历时间:"</span> + iteratorTime);</div><div class="line"></div><div class="line">        List&lt;String&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="comment">//加入数据</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">30000</span>;i++)&#123;</div><div class="line">            linkedList.add(<span class="string">""</span> + i);</div><div class="line">        &#125;</div><div class="line">        loopTime = RandomAccessTimeTest.traverseByLoop(linkedList);</div><div class="line">        iteratorTime = RandomAccessTimeTest.traverseByIterator(linkedList);</div><div class="line">        System.out.println(<span class="string">"LinkedList:"</span>);</div><div class="line">        System.out.println(<span class="string">"for循环遍历时间:"</span> + loopTime);</div><div class="line">        System.out.println(<span class="string">"迭代器遍历时间:"</span> + iteratorTime);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<p>ArrayList:<br>for 循环遍历时间: 3<br>迭代器遍历时间: 7</p>
<p>LinkedList:<br>for 循环遍历时间: 2435<br>迭代器遍历时间: 3</p>
<p>根据结果我们可以得出结论：<br><code>ArrayList</code> 使用 for 循环遍历优于迭代器遍历<br><code>LinkedList</code> 使用 迭代器遍历优于 for 循环遍历</p>
<p>根据以上结论便可利用 <code>RandomAccess</code> 在遍历前进行判断，根据 <code>List</code> 的不同子类选择不同的遍历方式， 提升算法性能。</p>
<p>学习阅读源码， 发现底层实现的精妙之处， 改变自己的思维， 从每一个小细节提升代码的性能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习 &lt;code&gt;Java&lt;/code&gt; 集合时， 最先学习的便是 &lt;code&gt;List&lt;/code&gt; 中的 &lt;code&gt;ArrayList&lt;/code&gt; 和 &lt;code&gt;LinkedList&lt;/code&gt;， 学习集合很关键的是学习其源码， 了解底层实现方式， 那么今天就讲讲 &lt;code&gt;ArrayList&lt;/code&gt; 实现的一个接口 &lt;code&gt;RandomAccess&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解 Java 中 protected 修饰符</title>
    <link href="http://www.leozzy.com/2017/11/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E4%B8%ADProtected%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://www.leozzy.com/2017/11/30/深入理解Java中Protected修饰符/</id>
    <published>2017-11-30T14:00:27.000Z</published>
    <updated>2017-11-30T10:41:22.474Z</updated>
    
    <content type="html"><![CDATA[<p>看似简单的东西可以引出很多问题， 学习过程中很多概念我们都只是「好像了解」、「貌似是这样」、「应该没问题」， 其实缺乏的是仔细思考， 对自己少问了几个「为什么」。</p>
<p>在 Java 中， 访问权限修饰符属于最最基础的知识， protected 修饰符只是其中一个， 如果你要问为什么不拿 public、default、private 来深究呢？ 那么看完这篇文章你会知道为何 protected 更值得深入思考。</p>
<a id="more"></a>
<p>在 《Thinking in Java》 中，protected 的名称是「继承访问权限」，这也就是我们记忆中的 protected：protected 必须要有继承关系才能够访问。 所以你以为你懂了， 可是你真的理解了这句话吗？</p>
<p>先思考几个问题：</p>
<ol>
<li><p>同一个包中， 子类对象能访问父类的 protected 方法吗？</p>
</li>
<li><p>不同包下， 在子类中创建该子类对象能访问父类的 protected 方法吗？</p>
</li>
<li><p>不同包下， 在子类中创建父类对象能访问父类的 protected 方法吗？</p>
</li>
<li><p>不同包下， 在子类中创建另一个子类的对象能访问公共父类的 protected 方法吗？</p>
</li>
<li><p>父类 protected 方法加上 static 修饰符又会如何呢？</p>
</li>
</ol>
<p>《Thinking in Java》中有一句话：「protected 也提供包访问权限， 也就是说，相同包内的其他类可以访问 protected元素」， 其实就是 protected 修饰符包含了 default 默认修饰符的权限， 所以第 1 个问题你已经知道答案了， 在同一个包中， 普通类或者子类都可以访问基类的 protected 方法。</p>
<h2 id="父类为非静态-protected-修饰类"><a href="#父类为非静态-protected-修饰类" class="headerlink" title="父类为非静态 protected 修饰类"></a>父类为非静态 protected 修饰类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String protect = <span class="string">"protect field"</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"i am parent"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>不同包下，在子类中通过父类引用不可以访问其 protected 方法</strong></p>
<p>无论是创建 Parent 对象还是通过多态创建 Son1 对象， 只要 Parent 引用， 则不可访问， 编译器会提示错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage.sonpackage1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.protectedaccess.parentpackage.Parent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Parent parent1 = <span class="keyword">new</span> Parent();</div><div class="line">        <span class="comment">// parent1.getMessage();   错误</span></div><div class="line"></div><div class="line">        Parent parent2 = <span class="keyword">new</span> Son1();</div><div class="line">        <span class="comment">// parent2.getMessage();  错误</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>不同包下，在子类中通过该子类引用可以访问其 protected 方法</strong></p>
<p>子类中实际上把父类的方法继承下来了， 可以通过该子类对象访问， 也可以在子类方法中直接访问，  还可以通过 super 关键字调用父类中的该方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage.sonpackage1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.protectedaccess.parentpackage.Parent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</div><div class="line">        son1.getMessage(); <span class="comment">// 输出：i am parent,</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>&#123;</div><div class="line">        getMessage();  <span class="comment">// 如果子类重写了该方法， 则输出重写方法中的内容</span></div><div class="line">        <span class="keyword">super</span>.getMessage(); <span class="comment">// 输出父类该方法中的内容</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>不同包下，在子类中不能通过另一个子类引用访问共同基类的 protected 方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage.sonpackage2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.protectedaccess.parentpackage.Parent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意是 Son2 是另一个子类， 在 Son1 中创建 Son2 的对象是无法访问父类的 protected 方法的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage.sonpackage1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.protectedaccess.parentpackage.Parent;</div><div class="line"><span class="keyword">import</span> com.protectedaccess.parentpackage.sonpackage2.Son2;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Son2 son2 = <span class="keyword">new</span> Son2();</div><div class="line">        <span class="comment">// son2.getMessage(); 错误</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="父类为静态-protected-修饰类"><a href="#父类为静态-protected-修饰类" class="headerlink" title="父类为静态 protected 修饰类"></a>父类为静态 protected 修饰类</h2><p>对于protected的静态变量， 在子类中可以直接访问， 在不同包的非子类中则不可访问</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String protect = <span class="string">"protect field"</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"i am parent"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静态方法直接通过类名访问</p>
<p><strong>无论是否同一个包，在子类中均可直接访问</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.protectedaccess.parentpackage.sonpackage1;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.protectedaccess.parentpackage.Parent;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son3</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Parent.getMessage(); <span class="comment">// 输出： i am parent</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>在不同包下，非子类不可访问</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.protectedaccess.parentpackage.sonpackage1;</div><div class="line"></div><div class="line">import com.protectedaccess.parentpackage.Parent;</div><div class="line"></div><div class="line">public class Son4&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       // Parent.getMessage(); 错误</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到这里你应该知道有多少种情况了， 针对不同的情况都可能出现意外的结果， 所以还是得多实践， 仅仅在书上看一遍 protected 修饰符的作用是无法真正发现它的微妙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看似简单的东西可以引出很多问题， 学习过程中很多概念我们都只是「好像了解」、「貌似是这样」、「应该没问题」， 其实缺乏的是仔细思考， 对自己少问了几个「为什么」。&lt;/p&gt;
&lt;p&gt;在 Java 中， 访问权限修饰符属于最最基础的知识， protected 修饰符只是其中一个， 如果你要问为什么不拿 public、default、private 来深究呢？ 那么看完这篇文章你会知道为何 protected 更值得深入思考。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.leozzy.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.leozzy.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>String 的两种创建方式的区别以及 intern() 方法</title>
    <link href="http://www.leozzy.com/2017/11/25/String%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.leozzy.com/2017/11/25/String的两种创建方式的区别/</id>
    <published>2017-11-25T10:44:44.000Z</published>
    <updated>2017-11-25T03:48:48.846Z</updated>
    
    <content type="html"><![CDATA[<p><code>Java</code> 两种创建字符串的方式，在内存中的存取机制不同。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"abc"</span>;</div><div class="line">String b = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>前提</strong></p>
<p>双等号==的含义：</p>
<ul>
<li>基本数据类型之间应用双等号，比较的是他们的数值。</li>
<li>引用类型之间应用双等号，比较的是他们在内存中的存放地址。</li>
</ul>
<p>重写 equals() 方法是比较数值，String 已经重写了该方法，所以直接使用。</p>
<p><strong>双引号型</strong></p>
<p>Java 为 String 类型提供了常量池机制，当使用双引号定义对象时，Java 环境首先去字符串常量池池寻找相同内容的字符串，如果存在就直接拿出来应用，如果不存在则创建一个新的字符串放在常量池中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"abc"</span>;</div><div class="line">String b = <span class="string">"abc"</span>;</div><div class="line">System.out.println(a == b); <span class="comment">// true</span></div><div class="line">System.out.println(a.equals(b)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>变量 a 和 b 使用的是缓冲区中的同一个存储对象，该对象存放在方法区的常量池中。</p>
<p><strong>new型</strong></p>
<p>通过 <code>new</code>关键字创建 String 对象，每次调用都会创建一个新的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String c = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">String d = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">System.out.println(c == d); <span class="comment">//false</span></div><div class="line">System.out.println(c.equals(d)); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>new 出来的对象，每次调用时，都会产生一个新的对象，因此对象的引用是不同的，只是值相等而已。</p>
<p><strong>字符串连接的情况</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"ab"</span>;</div><div class="line">String b = <span class="string">"abc"</span>;</div><div class="line">String c = <span class="string">"ab"</span> + <span class="string">"c"</span>;</div><div class="line">String d = a + <span class="string">"c"</span>;</div><div class="line">System.out.println(b == c); <span class="comment">// true</span></div><div class="line">System.out.println(b == d); <span class="comment">// false</span></div><div class="line">System.out.println(b.equals(d)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>b 与 c 创建的字符串是完全等价的<br>d 等号右边有一个非常量，得到的结果相当于是 new 创建的一个对象</p>
<p><strong>intern() 方法</strong></p>
<p>intern()方法使用的特性是运行时常量池，具备动态性，常量不一定只有编译时产生，运行时也可能将新的常量放入池中</p>
<p>intern 方法会返回一个字符串对应的常量值，在执行 intern 方法时，JVM 会检查常量池中是否存在和该字符串相同的常量值，如果有，则返回该常量值，若没有，则创建该常量值，并返回。即，intern 返回的是值常量池中的 String，不是堆上的String，相当于用双引号创建 String</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String a = <span class="string">"ab"</span>;</div><div class="line">String b = <span class="string">"abc"</span>;</div><div class="line">String d = (a + <span class="string">"c"</span>).intern();</div><div class="line">System.out.println(b == d); <span class="comment">// true</span></div><div class="line">System.out.println(b.equals(d)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String a = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">String b = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">System.out.println(a == b); <span class="comment">// false</span></div><div class="line">System.out.println(a.intern() == b.intern()); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p><strong>常量池的好处</strong></p>
<p>常量池是为了避免频繁的创建和销毁对象而影响系统性能，实现了对象的共享。<br>例如字符串常量池， 在编译阶段就把所有的字符串文字放到一个常量池中。</p>
<ul>
<li>节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。</li>
<li>节省运行空间：比较字符串时，== 比 equals 快。对于两个引用变量，只用 == 判断引用是否相等，也就可以判断实际值是否相等。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Java&lt;/code&gt; 两种创建字符串的方式，在内存中的存取机制不同。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String a = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.leozzy.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.leozzy.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal的正确打开方式</title>
    <link href="http://www.leozzy.com/2017/11/23/BigDecimal%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.leozzy.com/2017/11/23/BigDecimal的正确打开方式/</id>
    <published>2017-11-22T16:41:27.000Z</published>
    <updated>2017-11-22T09:14:45.967Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 Java 的过程中是否对一些小数的计算结果感到困惑？</p>
<p>0.01 + 0.05 的计算结果竟然是 0.060000000000000005 ？</p>
<p>这就是 Java 中的精度丢失问题，具体是为什么呢？这就涉及到计算机存储的一些知识，这就不展开讨论，详情请使用 Google。</p>
<p>那么这样的计算结果会带来什么问题呢？<br><a id="more"></a><br>假设你在天猫买一个 0.01 元和 0.05 元的东西，而此时你的余额刚好只有 0.06 元，如果天猫的后台系统用普通的方式进行小数运算，它要求你付款 0.060000000000000005 元，那岂不是买不起了。</p>
<p>所以在商业计算方面，涉及到小数精度的运算的地方，这个问题都是需要解决的。</p>
<p>我们先来看看几个奇怪的运算结果：</p>
<pre><code>System.out.println(0.011 + 0.05);//0.061
System.out.println(0.01 + 0.05);//0.060000000000000005
System.out.println(1.0 - 0.42);//0.5800000000000001
System.out.println(4.015 * 100);//401.49999999999994
System.out.println(123.3/100);//1.2329999999999999
</code></pre><p>对于这些情况我们都是无法理解的，那么我们用 <code>BigDecimal</code> 来解决这个问题</p>
<pre><code>BigDecimal b1 = new BigDecimal(0.01);
BigDecimal b2 = new BigDecimal(0.02);
System.out.println(b1.add(b2));
//0.03000000000000000062450045135165055398829281330108642578125
</code></pre><p>结果竟然是更奇怪更长的一串数字，说好的 <code>BigDecimal</code> 大法呢？</p>
<p>实际上，<code>BigDecimal</code> 重载了很多个构造函数，而能解决问题的并不是这个构造函数，而是 <code>BigDecimal(String)</code>，我们需要使用它才能解决问题。</p>
<pre><code>BigDecimal b1 = new BigDecimal(&quot;0.01&quot;);
BigDecimal b2 = new BigDecimal(&quot;0.02&quot;);
System.out.println(b1.add(b2));//0.03
</code></pre><p>所以我们要解决精度问题，不仅要使用 <code>BigDecimal</code>，而且还一定要使用它的 <code>String</code> 构造方法。</p>
<p>那么在实际应用中都会涉及到从数据库中取值，而数据库中都是 <code>float</code> 或者 <code>double</code> 类型，此时我们最方便的做法便是手动写一个工具类 <code>BigDecimalUtil</code>，用来进行类型的转化，转成我们需要的 <code>String</code> 类型</p>
<pre><code>public class BigDecimalUtil {
//创建私有构造器，防止外界实例化该类
private BigDecimalUtil(){
}

//加法
public static BigDecimal add(double v1,double v2){
    BigDecimal b1 = new BigDecimal(Double.toString(v1));
    BigDecimal b2 = new BigDecimal(Double.toString(v2));
    return b1.add(b2);
}

//减法
public static BigDecimal sub(double v1,double v2){
    BigDecimal b1 = new BigDecimal(Double.toString(v1));
    BigDecimal b2 = new BigDecimal(Double.toString(v2));
    return b1.subtract(b2);
}

//乘法
public static BigDecimal mul(double v1,double v2){
    BigDecimal b1 = new BigDecimal(Double.toString(v1));
    BigDecimal b2 = new BigDecimal(Double.toString(v2));
    return b1.multiply(b2);
}

//除法
public static BigDecimal div(double v1,double v2){
    BigDecimal b1 = new BigDecimal(Double.toString(v1));
    BigDecimal b2 = new BigDecimal(Double.toString(v2));
    return b1.divide(b2);
}
}
</code></pre><p>看似一个小问题，但是不注意的话仍然会引发不可预算的灾难。所以很多细节都需要我们去把控，掌握一些基本的解决方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习 Java 的过程中是否对一些小数的计算结果感到困惑？&lt;/p&gt;
&lt;p&gt;0.01 + 0.05 的计算结果竟然是 0.060000000000000005 ？&lt;/p&gt;
&lt;p&gt;这就是 Java 中的精度丢失问题，具体是为什么呢？这就涉及到计算机存储的一些知识，这就不展开讨论，详情请使用 Google。&lt;/p&gt;
&lt;p&gt;那么这样的计算结果会带来什么问题呢？&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.leozzy.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.leozzy.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《通往财富自由之路》总结（二）</title>
    <link href="http://www.leozzy.com/2017/11/13/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF%E6%80%BB%E7%BB%93%E4%BA%8C/"/>
    <id>http://www.leozzy.com/2017/11/13/通往财富自由之路总结二/</id>
    <published>2017-11-13T09:19:23.000Z</published>
    <updated>2017-11-14T12:23:25.660Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结如下章节内容</p>
<ul>
<li>“活在当下” vs “活在未来”</li>
<li>遇到贵人的科学方法</li>
<li>你到底有没有资本</li>
</ul>
<a id="more"></a>
<h2 id="“活在当下”-vs-“活在未来”"><a href="#“活在当下”-vs-“活在未来”" class="headerlink" title="“活在当下” vs “活在未来”"></a>“活在当下” vs “活在未来”</h2><p>人们常说：「活在当下」，这流行的建议本意是好的，应该把握好现在的时间，生活当然应该活在当下，生活的大部分，尤其是「肉身」，当然一直「活在当下」，但是思想应该「活在未来」，思维上活在未来。</p>
<p><strong>怎样活在未来</strong></p>
<ol>
<li><p>你对未来有个预测</p>
</li>
<li><p>那个预测需要时间才能得到结果</p>
</li>
<li><p>你笃信你的预测是正确的</p>
</li>
<li><p>于是你提前按照那个预测的结果行动、选择、思考</p>
</li>
<li><p>你终将走到那个结果出现的时刻</p>
</li>
<li><p>最终证明你的预测是正确的</p>
</li>
<li><p>那么，由于你提前按未来正确的结果行动、选择、思考，于是，在相当长一段时间里，你的生活中的一部分，就是「活在未来」</p>
</li>
</ol>
<p><strong>一个简单的预测</strong></p>
<ul>
<li><p>长期来看，脑力的产出率一定比体力的产出率高，且高出许多个量级</p>
</li>
<li><p>体力增长的玻璃顶很明显，脑力增长的玻璃顶不知道在哪儿</p>
</li>
<li><p>体力衰退的时间来得很早，脑力衰退的时间来得晚很多</p>
</li>
<li><p>通过暴力可获得的暴利正在减少，因为大趋势来看，一定是知识更可能产生更大的暴利</p>
</li>
</ul>
<p>活在未来的人一定比活在当下的人有更多的财富</p>
<p>所谓的投资，无非就是用现在的资源换取未来的资源</p>
<p><strong>害怕自己预测错误</strong></p>
<p>不要企图一次就预测对所有的事情，预测的能力是慢慢培养起来的。如果暂时没什么自信，就不要判断太远的未来。重要的是，判断过后，要用行动去验证，在这个过程中不断修正自己的想法。</p>
<p>预测未来这件事并不容易，也没有一个万能公式可以套用。不要期待万能公式，所有的路都需要自己一步步试出来，在这种基础上建立起来的未来才可靠。</p>
<p><strong>笃信</strong></p>
<p>笃信的根基并非盲目的自信，而是源自扎实的推理和不断的拷问。没有足够的数据，不会轻易下结论。</p>
<p>大多数人最终只停留在想一想的阶段，就是因为没有笃信自己的判断。其实未必是笃信，连相信都不足以让你采取行动。</p>
<p><strong>践行</strong></p>
<p>挂在嘴边永远比实际践行简单得多</p>
<p>真正的道歉从来不只是嘴上说说的。真正有歉意的人不仅会用嘴道歉，更会马上用行动道歉，弥补过失，直至一切恢复原状，甚至比原来更好。</p>
<p><strong>从开始就像专业人士一样生活</strong></p>
<p>其实本质上，不论学习任何只是，还是打磨任何技巧，最重要的一点就是：从开始就像专业人士一样生活。<br>最好的学习方式从来不是「学」，而是「用」。开始就「玩真的」，绝对不拿自己当业余选手。</p>
<p>这个方法，本质上就是让你提前活在那个专业领域。开始的时候，一定非常困难，但是只有开始就努力想专业人士一样生活，你才有机会最终真的那么生活。</p>
<p>如果你希望成为什么样的人，不要等待任何时机成熟，今天就开始按照那个标准要求自己。这样你相当于某种程度上已经活在自己期待的未来里了。</p>
<hr>
<p>不要对别人的鼓励，抱有太大的期待，只有把这部分的支持都当作额外赠送的，你才有机会扛过开始阶段的困难。</p>
<p>即便每个人的肉身都活在当下，但每个人的世界还是很不一样的。因为思考质量不同。他们其实生活在完全不同的世界里。</p>
<p><strong>需要认真思考的问题</strong></p>
<ol>
<li><p>你曾经做出过的最重要的正确预测是什么？为什么它那么重要？</p>
</li>
<li><p>你做出过的最大的，而自己却最终并没有因此获益的预测是什么？为什么它是最大的，又，为什么你并没有因此获益？</p>
</li>
<li><p>过去的十年甚至二十年里，你也知道「知识就是力量」，「知识就是金钱」，可为什么你实际上并没有忠实这个道理？哪儿出了问题？</p>
</li>
<li><p>每天花三十分钟时间，预测一下明天，下一周可能发生的事情；有哪些是你能想到了但你身边大多数人估计想不到的？（也许你会失望，你想不到符合一个标准的东西，没关系，别有压力，那是因为你过去从来没做过这事儿造成的）</p>
</li>
<li><p>评估一下你身边的人，谁是预测能力最强的？再想想为什么你过去并没有与他建立深入的关系？为什么你很少与他有深入的讨论？</p>
</li>
</ol>
<h2 id="遇到贵人的科学方法"><a href="#遇到贵人的科学方法" class="headerlink" title="遇到贵人的科学方法"></a>遇到贵人的科学方法</h2><p><strong>需要修正的观念</strong></p>
<p>运气好只是外人看到的表象，我想真实的情况应该是这些人在一些事情上的积累已经达到了足够的深度和厚度，而好的结果的发生只不过是水到渠成的事。</p>
<p>能够遇到贵人在一定程度上是偶然也是必然，它是自己生活的一面镜子。</p>
<p><strong>方法</strong></p>
<p>自己首先得是个贵人，才能遇到贵人，甚至更多贵人。</p>
<p>做对的事情远比把事情做对重要得多。</p>
<p><strong>朴素的道理、遇到贵人的原则</strong></p>
<p>越是朴素的道理，越是永恒。认真琢磨那些朴素的、永恒的，乃至于被大多数人当作耳旁风、当作陈辞滥调的道理，研究透了，瞬间有相当于穿越到了未来 – 因为那些道理在未来依然成立。</p>
<ol>
<li><p>乐观的人更容易成为他人的贵人</p>
</li>
<li><p>贵人更容易遇到贵人</p>
</li>
<li><p>能帮助他人进步的才是真正的贵人</p>
</li>
<li><p>优秀的人，值得尊重的人更容易获得帮助</p>
</li>
<li><p>乐于分享的人更容易获得帮助</p>
</li>
<li><p>不给他人制造负担的人更容易获得帮助</p>
</li>
<li><p>不耻于求助的人更容易获得帮助</p>
</li>
<li><p>求助的时候不宜仅用金钱作为回报，帮助他人的时候不宜收取金钱回报</p>
</li>
<li><p>贵人不一定是牛人，牛人常常只不过是自顾自地牛，贵人不一样，他们常常「以和为贵」，更懂得「独贵贵不如众贵贵」</p>
</li>
<li><p>很多时候，人们的成功，源自于大量的人希望看到他成功。反过来，若是有大量的人不愿意看到某人成功，那么此人很难获得所谓的「贵人相助」</p>
</li>
<li><p>正在做正确事情的人，更容易获得贵人相助，所谓得道多助</p>
</li>
<li><p>活在未来的人更容易遇到贵人，因为别人能在他身上看到未来</p>
</li>
</ol>
<p><strong>理解求助</strong></p>
<p>大多数人把求助当作一个低声下气、卑躬屈膝、胁肩谄笑的行为 – 那不是求助，那是乞讨。事实上，求助是一种交易，不仅如此，它还是一种更为隐蔽却意义巨大的交易。</p>
<p>求助不等于麻烦别人，比起觉得对方在麻烦自己，真正的贵人在帮助别人的时候，通常会觉得自己的能力得到了认可，并且很愿意给予对方这一点「举手之劳」。</p>
<p>贵人之所以愿意帮助你，是因为他已经看到你的价值，要么这种价值帮助他确立自己的价值，要么这种价值让它看到未来的某种可能性 – 尽管不确定。</p>
<p>在你出手相助的那一瞬间，你已经得到了自然的回报 – 这也很可能是你乐于相助的根本原因。求助根本就不是讨好的艺术，而是正确展示自我价值的艺术。帮助别人不是你赢我输，而是一个共同进步的过程。</p>
<p><strong>聪明的人会做的两件事</strong></p>
<ul>
<li><p>储备人际价值</p>
</li>
<li><p>到人际价值高的地方去扎堆</p>
</li>
</ul>
<p><strong>需要认真思考的问题</strong></p>
<ol>
<li><p>文中提到的遇到贵人的原则你觉得是否有道理？或者你是否已经经历过它的神奇？</p>
</li>
<li><p>你自己有没有遇到过贵人？那人为什么可以被称为贵人？你若是没有遇见他，会是什么样子？</p>
</li>
<li><p>你自己有没有被别人当作贵人对待过？知不知道为什么？</p>
</li>
</ol>
<h2 id="你到底有没有资本"><a href="#你到底有没有资本" class="headerlink" title="你到底有没有资本"></a>你到底有没有资本</h2><p><strong>对资本的理解</strong></p>
<p>资本确实主要由钱构成，但，仅仅一堆钱放在那里肯定算不上是资本。</p>
<p>钱本身顶多可以算作资金，而它想要称为有效的资本，还有需要至少另外三个要素：</p>
<ol>
<li><p>资金的金额大小</p>
</li>
<li><p>资金的使用时限</p>
</li>
<li><p>资金背后的智慧</p>
</li>
</ol>
<p><strong>本金与盈亏比例</strong></p>
<p>投资的重点并不在于盈亏绝对值大小，而是在于盈亏比例大小。看相对值而不是绝对值。</p>
<p>把焦点放在盈亏比例上（相对值），而不是本金大小，盈亏金额上（绝对值），是 90% 以上的投资者终生没有学会的东西。本金大小相对来看其实根本不重要，重要的是盈亏比例。</p>
<p><strong>无期徒刑</strong></p>
<p>能不能给自己的投资款「判上个无期徒刑」</p>
<p>拿出年收入的一部分作为投资款，并给这个投资款“判上个无期徒刑”，其实在很大的概率上并不会影响自己的生活质量。</p>
<p><strong>成长公式</strong></p>
<p>复利公式：(1+r)^n</p>
<p>1 是你的起点，r 代表每天的进步，它可以很小，但是你要保证，它一定得是正的。</p>
<p><strong>正确理解投资</strong></p>
<p>我们每天做的都是投资。一天的时间如何利用，才能获得最多的回报；有限的注意力要投入在哪些领域，才能得到最有效的产出。这些本质上都是投资，而且是你不得不做的投资。</p>
<p>投资不一定只有理财和股票，还有自我成长，尤其是在那些只有学会才能站在资本背后的技能上。</p>
<p><strong>关于机遇</strong></p>
<p>如果你没有准备好，那么那些所谓的机会并不属于你。</p>
<p>如果你已经准备好了，你会发现原本在别人眼里称不上机会的事情，都有可能变成你的机遇。</p>
<p><strong>需要认真思考的问题</strong></p>
<ol>
<li><p>如果用 5000 元人民币就可以开始正儿八经的投资活动的话（暂时别管究竟是哪一种投资活动），你最早什么时候可能开始？迄今已经多久了？你错过了多长时间？</p>
</li>
<li><p>如果用 5000 元人民币就可以开始正儿八经的投资活动的话，你身边有多大比例的人，事实上可以从事投资活动，可实际上却从未意识到自己竟然可以？你猜他们还要错过多久？</p>
</li>
<li><p>认真问自己：我到底现在可以有多少金额可以真的 “判它个无期徒刑”？如果觉得不够多，那么，你心里的那个数字究竟是多少？你要花多长时间搞定？</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结如下章节内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“活在当下” vs “活在未来”&lt;/li&gt;
&lt;li&gt;遇到贵人的科学方法&lt;/li&gt;
&lt;li&gt;你到底有没有资本&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="成长" scheme="http://www.leozzy.com/categories/%E6%88%90%E9%95%BF/"/>
    
      <category term="通往财富自由之路" scheme="http://www.leozzy.com/categories/%E6%88%90%E9%95%BF/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="通往财富自由之路" scheme="http://www.leozzy.com/tags/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>《通往财富自由之路》总结（一）</title>
    <link href="http://www.leozzy.com/2017/10/22/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF%E6%80%BB%E7%BB%93%E4%B8%80/"/>
    <id>http://www.leozzy.com/2017/10/22/通往财富自由之路总结一/</id>
    <published>2017-10-22T10:59:24.000Z</published>
    <updated>2017-11-14T08:22:23.110Z</updated>
    
    <content type="html"><![CDATA[<p>恰当地为知识付费是非常值得的。学习了《通往财富自由之路》专栏的前三周内容，最关键的词是：注意力。<br>鸡汤文只能让大多数人保持三分钟热度，学习了《通往财富自由之路》后，发现这些文字是可以渐渐改变一个人的思维，甚至行动，有些文章重复学习可以有不同的体会，对知识进行总结也就是在增强记忆，以下是对专栏前三周内容的总结，用时两小时：</p>
<a id="more"></a>
<h2 id="财富自由"><a href="#财富自由" class="headerlink" title="财富自由"></a>财富自由</h2><p>要清楚的知道某个概念，首先要找到它的定义。那么，什么是财富自由呢？</p>
<ul>
<li><p>维基百科：财富自由是指，你无须为生活开销而努力为钱工作的状态。简单地说，你的资产产生的被动收入必须至少等于或超过你的日常开支，这是我们大多数人最渴望达到的状态，如果进入这种状态，我们就可以称之为退休或其他各种名称</p>
</li>
<li><p>百度百科：财富自由就是有足够多的时间和足够多的钱做你想做的事情。</p>
</li>
<li><p>笑来老师：所谓的个人财富自由，指的是某个人再也不用为了满足生活必需而出售自己的时间了。</p>
</li>
</ul>
<p>其实财富自由实际上是时间上的自由，每个人做的所有奋斗的本质，都是让自己出售的时间单价更高。提高时间单价的方法，就是想办法把原来一份的时间，卖出更多份。</p>
<p>千万不要误以为财富自由是个终点。当你获得财富自由之后，你依然应该专注成长而不是专注成功，不管你获得了怎样的成功，你依然需要成长，财富自由不是终点，那只是通往终点过程中的一个里程碑而已。</p>
<h2 id="三条铁律"><a href="#三条铁律" class="headerlink" title="三条铁律"></a>三条铁律</h2><p><strong>铁律一：成长才是根本关键</strong></p>
<p>成长才是永恒的刚需。<br>你的每一个选择，都要从积累能力的角度出发，每一次选择，都要考虑自己还需要什么能力，以及新的选择对于自己发展已有能力有没有帮助。</p>
<p><strong>铁律二：重视价值忽略估值</strong></p>
<p>不要让自己的估值过分超过自己的实际价值，因为当你在意估值的时候，你就会忘记你的价值。<br>估值是虚的，而价值才是实实在在的，并且只有提高了个人价值，估值才能渐渐提高。</p>
<p><strong>铁律三：耐心比什么都重要</strong></p>
<p>没耐心的人不会有好的积累，他们不会把每件事都当做自己的事来做；没耐心的人当然也更注重估值，甚至愿意为之自欺和欺人，因为他们只能想到短期效益；没耐心的人甚至都不会思考真正重要的事情–价值。</p>
<h2 id="三个隐形的大坑"><a href="#三个隐形的大坑" class="headerlink" title="三个隐形的大坑"></a>三个隐形的大坑</h2><p>三个隐形的大坑，基本上99.99％的人都在坑里面</p>
<p><strong>莫名奇妙地凑热闹</strong></p>
<p>其实很多事情与自己没有任何关系，都是好奇心驱使，非得知道发生了什么事。</p>
<p>互联网越来越发达，信息传播越来越快，网上很多信息八卦其实与你我并无关系，你没必要知道，娱乐明星发生了什么事并不能成为你的谈资，凑热闹影响的是你的注意力。</p>
<p><strong>心急火燎地随大流</strong></p>
<p>大家再做什么于是你也不甘落后，紧跟着大家的步伐，生怕自己会失去什么，放弃了自己原有的计划而去随大流，随大流影响的是你的注意力。</p>
<p><strong>操碎了别人的心肝</strong></p>
<p>别人发生了什么事，你很关注，然而这与你并无关系，你只是知道这个事而已，对你的成长没有任何帮助。别人不需要你操心，而你却把所有注意力集中到了别人身上，对他没有任何影响，而影响了你的注意力。</p>
<p>三个大坑来源于人们追求短期享乐。凑热闹、随大流、瞎操心，都可以在段时间内给我们的大脑以好处刺激。可以给人们一些更直接的所谓安全感（你关心大家都在关心的事儿，才觉得没有 “吃亏”）、所谓归属感（你做大家都在做的事儿，才不会觉得孤立无援）、所谓成就感（你替别人瞎操心，会让你觉得有帮到他人的愉悦感）。</p>
<h2 id="最宝贵的财富"><a href="#最宝贵的财富" class="headerlink" title="最宝贵的财富"></a>最宝贵的财富</h2><p><strong>注意力</strong></p>
<p>每个人都拥有的、最重要的、却被人忽视的宝贵财富是注意力：钱不是最重要的，因为它可以再生；时间也不是最重要的，因为它本质上不属于你，你只能试着与它做朋友，让它为你所用。你的注意力才是你所拥有的最重要的、最宝贵的资源–从这个角度望过去，人生其实是公平的，因为你的注意力确实是你自己可以做主的，除非你自己放弃。</p>
<p>你能集中起来的注意力真得很少，结果你还是凑热闹，随大流，操别人的心。你应该将注意力放在自身的成长上，不要被各种东西吸引眼球，但这并不代表 “事不关己高高挂起” 的价值观，而是说明：注意力很重要。</p>
<p>避免从一个极端走向另一个极端，注意力最终的目标的为了获得成长，成长需要拓展和加深现有的能力圈。提高注意力误以为只要不关心身边人和窗外事就是专注于自己，其实就是另一个极端。需要清楚提高注意力的目标是为了成长，而不是封闭自己。</p>
<p>学会回顾自己每天的注意力所集中的地方，回顾前一天自己关注的是什么事情，上周关注的是什么事情，回顾上一个月自己关注的是什么事情，当你每天都能很清晰地回顾自己注意力所在的事情，那么你便能更注意自己今后的成长。</p>
<p><strong>注意力应该放在哪</strong><br>跳出三个大坑，注意力专注在自己身上，但是每天瞎忙活并不代表自己已经把注意力放在成长上了，应该明确自己的注意力应该放在哪里。</p>
<ul>
<li>注意力放在自己的成长上。放在一切可以有积累效应的技能上，不断磨练，提高自己的技能。</li>
<li>注意力放在自己的真爱上。真爱包括你爱的人和你爱的事，对你感兴趣的事情，你应该花注意力去完成这件事情，对你爱的人，你应该花注意力在他们身上，放到他们身上之后，关注的仍然是他们的成长。</li>
<li>注意力放在对整个社会真正有贡献的事情上。对社会真正有贡献的人，价值就是巨大的。</li>
</ul>
<p><strong>需要认真思考的问题</strong></p>
<ol>
<li><p>你有没有掉到那三个大坑的某一个里？</p>
</li>
<li><p>你觉得怎样花费你的注意力是最合理的？</p>
</li>
<li><p>每天都要回顾一下自己当日的注意力开销</p>
</li>
</ol>
<h2 id="付费就是捡便宜"><a href="#付费就是捡便宜" class="headerlink" title="付费就是捡便宜"></a>付费就是捡便宜</h2><p>这个观点是比较难理解的，但是你得看在什么情况下付费，不是让你什么钱都乱花，而是花在恰当的地方，能节约时间，不分散自己注意力的地方。</p>
<p>认为这个观点是错误的根本原因在于基础观念错误 – 大多数人认为钱是最重要的，因为赚钱难。但实际上，注意力才是你最宝贵的财富，并且从价值上来看，顺序是这样的：</p>
<p><strong>注意力 &gt; 时间 &gt; 金钱</strong></p>
<p>以现在的收入水平，衡量金钱换取时间或注意力是否值得并不合理，应该比较的是这两个：</p>
<ul>
<li>这段时间可能给你带来的潜在收入。</li>
<li>为了节省这段时间花掉的钱。</li>
</ul>
<p>金钱可以再生，注意力和时间是不可再生的，并且注意力和时间可以用来给自己增值，那么珍惜注意力和珍惜时间在恰当的情况下就是比金钱更重要。实际上恰当的情况下是大多数情况。某些时候，你可以花钱来节约自己宝贵的时间，当然这段时间是你在做对自己很有意义能让自己成长的事情，而不是把钱挥霍。你还可以用花钱来提高自己的注意力，比如买东西的时候多花点钱买好一些的，不至于外在的东西后期长时间影响你的注意力。</p>
<p>笑来老师：</p>
<ul>
<li>凡是能用钱买来的时间就是便宜的；凡是能用时间换来的注意力持续就是有价值的。</li>
<li>尽可能地用金钱换取时间，如果你竟然有机会用金钱换取注意力，那就更应该狠狠“捞一笔”。</li>
<li>在工具上省下的钱，都会变成麻烦回来纠缠你。</li>
<li>你的时间和注意力转瞬即逝，尽量不要它们浪费在迅速贬值的信息上去。</li>
</ul>
<p>换取来的注意力不是事不关己，而是：</p>
<ul>
<li>积累知识</li>
<li>磨练技能</li>
<li>观察生活</li>
<li>思考未来</li>
<li>创造价值</li>
<li>经营人脉</li>
<li>……</li>
</ul>
<p>还有重要两点：</p>
<ul>
<li>付费可能是你自己未来收费的基础</li>
<li>绝对不要负债付费</li>
</ul>
<p><strong>需要认真思考的问题</strong></p>
<ol>
<li><p>过去的一段时间里，你付费捡到的便宜都有哪些？</p>
</li>
<li><p>过去的一段时间里，你在哪些可以捡便宜的地方却浪费了时间与注意力？</p>
</li>
<li><p>过去的一段时间里，你发生过多少次因为跟家人吵架而整天心情不好的情况？</p>
</li>
<li><p>如果你需要持续的注意力，却反复被打扰，你有没有想出过什么有效对策？</p>
</li>
<li><p>你在哪些地方忽略了资产的价值顺序，乃至于你吃了大亏？</p>
</li>
</ol>
<h2 id="人生最重的枷锁"><a href="#人生最重的枷锁" class="headerlink" title="人生最重的枷锁"></a>人生最重的枷锁</h2><p>时时刻刻关注身边所有可以被关注的东西，而非常害怕竟然有被自己漏掉的。</p>
<p>一个类比：<br>几乎所有的低级动物的双眼都是长在两侧的。它们没有视觉盲区，它们可以同时看到上下左右前前后后，这是一种极为安全的配置，但是局限和副作用在于它们没办法把自己的目光集中在一处，没有办法仔细、长期观察任何一个点，于是不可能有深入思考，长期思考。</p>
<p>如果我们关注身边所有可以被关注的事情，相当于是退化了，为了寻求百分之百的安全感，时时刻刻被身边所发生的一切所吸引，不能深入长期观察，长期思考，被身边的事情吸引走注意力。</p>
<p>几乎所有的进步都是放弃了部分安全感才可能获得的，我们必须放弃一部分安全感，才能深入长期地观察、思考。补全主动放弃小部分安全感的办法是：不孤立的行动，选择与他人合作 – 或者称之为有效社交。合作的本质其实是大家各自放弃一小部分安全感，并把一部分安全感交由合作方来保障。信任是相信对方不会利用自己主动放弃的那一部分安全感。</p>
<p>在生活中找几个小领域试试 “放弃全视角”。</p>
<ul>
<li>关掉朋友圈、QQ 空间（或者只看几个朋友的朋友圈）</li>
<li>不看微博</li>
<li>不看电视剧</li>
<li>……</li>
</ul>
<p><strong>需要认真思考的问题</strong></p>
<ol>
<li><p>在生活中找几个小领域试试「放弃全视角」，体验几天？比如，关掉微信朋友圈「或者只看几个朋友的朋友圈」；把手机上的微博停用若干天；把手机完全静音若干天；不出门独处若干天；不看大家都看的电视剧、节目或者赛事若干天</p>
</li>
<li><p>你是不是一直在追求百分之百的安全感？你在哪方面被拖累很惨？</p>
</li>
<li><p>你身边一定有不少貌似能力很强却又其实并不得志的人，想想看，那是因为他们在哪方面过分追求安全感导致的？</p>
</li>
<li><p>你有几个百分之百值得信赖的朋友？和他们在一起的时候，有哪些方面完全不用考虑了？（相当于说，在那方面放弃了全视角，自己盲区也无所谓）</p>
</li>
<li><p>如果你的另一半极度缺乏安全感，你要如何做才能让他或她与你共同升级？</p>
</li>
</ol>
<p>将理论深刻记忆并反复提取，在行动中不断提醒自己，渐渐将理论转化为行动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恰当地为知识付费是非常值得的。学习了《通往财富自由之路》专栏的前三周内容，最关键的词是：注意力。&lt;br&gt;鸡汤文只能让大多数人保持三分钟热度，学习了《通往财富自由之路》后，发现这些文字是可以渐渐改变一个人的思维，甚至行动，有些文章重复学习可以有不同的体会，对知识进行总结也就是在增强记忆，以下是对专栏前三周内容的总结，用时两小时：&lt;/p&gt;
    
    </summary>
    
      <category term="成长" scheme="http://www.leozzy.com/categories/%E6%88%90%E9%95%BF/"/>
    
      <category term="通往财富自由之路" scheme="http://www.leozzy.com/categories/%E6%88%90%E9%95%BF/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="通往财富自由之路" scheme="http://www.leozzy.com/tags/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 知识总结</title>
    <link href="http://www.leozzy.com/2017/10/15/jQuery%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://www.leozzy.com/2017/10/15/jQuery学习总结/</id>
    <published>2017-10-15T09:37:44.000Z</published>
    <updated>2017-10-21T04:56:40.491Z</updated>
    
    <content type="html"><![CDATA[<p>个人建议：学习 jQuery 前先掌握基本的 JavaScrpit 语法，特别是对函数要掌握，jQuery 基本上是使用函数。</p>
<a id="more"></a>
<h1 id="jQuery-简介"><a href="#jQuery-简介" class="headerlink" title="jQuery 简介"></a>jQuery 简介</h1><ul>
<li><p>jQuery 是一个轻量级 JavaScript 库</p>
</li>
<li><p>jQuery 库位于一个 JavaScript 文件中，其中包含了所有的 jQuery 函数，需要通过 <code>&lt;script&gt;</code> 标签引入 jQuery 库才能使用</p>
</li>
</ul>
<h1 id="jQuery-库的三种引入来源"><a href="#jQuery-库的三种引入来源" class="headerlink" title="jQuery 库的三种引入来源"></a>jQuery 库的三种引入来源</h1><ul>
<li><p>本地引入<br>共有两个版本的 jQuery 可供下载 <a href="http://jQuery.com" target="_blank" rel="noopener">http://jQuery.com</a>：一份是精简过的，另一份是未压缩的（供调试或阅读）</p>
</li>
<li><p>从 Google 加载 CDN jQuery 核心文件（ 版本可更换 ）</p>
<blockquote>
<pre><code>src = http://ajax.googleapis.com/ajax/libs/jquery/1.4.0/jquery.min.js
</code></pre></blockquote>
</li>
<li><p>从 Microsoft 加载 CDN jQuery 核心文件（ 版本可更换 ）</p>
<blockquote>
<pre><code>src = http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js
</code></pre></blockquote>
</li>
</ul>
<h1 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h1><p><strong>基础语法：<code>$(selector).action()</code> </strong></p>
<ul>
<li><p>美元符号（$）定义 jQuery</p>
</li>
<li><p>选择符（selector）“ 查询 ” 和 “ 查找 ” HTML 元素</p>
</li>
<li><p>jQuery 的 <code>action()</code> 执行对元素的操作</p>
</li>
</ul>
<p><strong>文档就绪函数</strong></p>
<ul>
<li><p>文档就绪函数，用于在页面加载成功后执行的指定代码  </p>
</li>
<li><p>如果在文档没有完全加载之前就运行函数，操作可能失败</p>
</li>
<li><p>通常该函数用于替换 <code>window.onload</code> 事件，文档就绪函数的执行效率更高  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    code block</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以简写为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    code block</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>jQuery 标识符</strong><br>jQuery 使用 $ 符号作为 jQuery 的简写</p>
<ul>
<li><p>使用 jQuery 全名 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  jQuery(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    code block</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用 jQuery 简写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        code block</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>自定义 jQuery 别名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jq = $.noConflict();</div><div class="line">jq(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    jq(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        code block</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注：因为 javascrpit 某些框架中也使用 $ 作为简写( 就像 jQuery )，<code>noConflict()</code> 方法是为了解决 javascrpit 框架之间符号冲突而定义的方法，它会释放 $ 标识符的控制，这样其他脚本也可以使用这个符号</p>
<h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><p><strong> jQuery 元素选择器和属性选择器允许您通过标签名、属性名或内容对 HTML 元素进行选择 </strong></p>
<h4 id="jQuery-元素选择器"><a href="#jQuery-元素选择器" class="headerlink" title="jQuery 元素选择器"></a>jQuery 元素选择器</h4><p>jQuery 使用 CSS 选择器来选取 HTML 元素</p>
<ul>
<li><code>$(this)</code> 当前 HTML 元素</li>
<li><code>$(&quot;p&quot;)</code>  选取 <code>&lt;p&gt;</code> 元素</li>
<li><code>$(&quot;p.intro&quot;)</code> 选取所有 <code>class=&quot;intro&quot;</code> 的 <code>&lt;p&gt;</code> 元素</li>
<li><code>$(&quot;p#demo&quot;)</code> 选取所有 <code>id=&quot;demo&quot;</code> 的 <code>&lt;p&gt;</code> 元素</li>
<li><code>$(&quot;div#intro .head&quot;)</code> 选取 <code>id=&quot;intro&quot;</code> 的 <code>&lt;div&gt;</code> 元素中的所有 <code>class=&quot;head&quot;</code> 的元素</li>
</ul>
<h4 id="jQuery-属性选择器"><a href="#jQuery-属性选择器" class="headerlink" title="jQuery 属性选择器"></a>jQuery 属性选择器</h4><p>jQuery 使用 XPath 表达式来选择带有给定属性的元素</p>
<ul>
<li><code>$(&quot;[href]&quot;)</code> 选取所有带有<code>href</code> 属性的元素</li>
<li><code>$(&quot;[href=&#39;#&#39;]&quot;)</code> 选取所有带有 <code>href</code> 值等于<code>&quot;#&quot;</code> 的元素</li>
<li><code>$(&quot;[href!=&#39;#&#39;]&quot;)</code> 选取所有带有 <code>href</code> 值不等于 <code>&quot;#&quot;</code> 的元素</li>
<li><code>$(&quot;[href$=&#39;.jpg&#39;]&quot;)</code> 选取所有 <code>href</code> 值以 <code>&quot;.jpg&quot;</code> 结尾的元素</li>
</ul>
<h4 id="jQuery-CSS-选择器"><a href="#jQuery-CSS-选择器" class="headerlink" title="jQuery CSS 选择器"></a>jQuery CSS 选择器</h4><p>jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性</p>
<ul>
<li>把所有 p 元素的背景颜色更改为红色：<code>$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;)</code></li>
</ul>
<h1 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h1><ul>
<li><p>jQuery 事件处理方法是 jQuery 中的核心函数</p>
</li>
<li><p>事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。术语由事件“触发”（或“激发”）经常会被使用</p>
</li>
<li><p>例子：按钮的点击事件被触发时会调用一个函数<br><code>$(&quot;button&quot;).click(function() {..some code... } )</code></p>
</li>
</ul>
<p><strong>常用事件函数</strong></p>
<ul>
<li><code>$(document).ready(function)</code> 将函数绑定到文档的就绪事件（当文档完成加载时）</li>
<li><code>$(selector).click(function)</code>    触发或将函数绑定到被选元素的点击事件</li>
<li><code>$(selector).change(function)</code>    触发、或将函数绑定到指定元素的 change 事件</li>
<li><code>$(selector).dblclick(function)</code>    触发或将函数绑定到被选元素的双击事件</li>
<li><code>$(selector).focus(function)</code>    触发或将函数绑定到被选元素的获得焦点事件</li>
<li><code>$(selector).mouseover(function)</code>    触发或将函数绑定到被选元素的鼠标悬停事件</li>
</ul>
<h1 id="jQuery-效果"><a href="#jQuery-效果" class="headerlink" title="jQuery 效果"></a>jQuery 效果</h1><p>效果通常绑定在某在事件上，例如通过点击按钮产生隐藏效果</p>
<p><strong> 常见的用于效果的函数 </strong></p>
<p>1.隐藏、显示、切换</p>
<pre><code>- 隐藏 `$(selector).hide(speed,callback)` ： `$(&quot;p&quot;).hide();`

- 显示`$(selector).show(speed,callback)` ： `$(&quot;p&quot;).show(1000);`

- 切换隐藏/显示`$(selector).toggle(speed,callback)` ： `$(&quot;p&quot;).toggle();`
</code></pre><p>speed 和 callback 都是可选参数</p>
<p>speed 参数规定显示/隐藏的速度，可选值为：”slow”、”fast” 或毫秒值</p>
<p>callback 参数是显示/隐藏完成后所执行的函数名称</p>
<p>2.淡入、淡出</p>
<pre><code>- 淡入 `$(selector).fadeIn(speed,callback)` ： `$(&quot;#div1&quot;).fadeIn(&quot;slow&quot;);`

- 淡出 `$(selector).fadeOut(speed,callback)` ： `$(&quot;#div3&quot;).fadeOut(3000);`

- 切换淡入/淡出 `$(selector).fadeToggle(speed,callback)` ： ` $(&quot;#div1&quot;).fadeToggle();`

- 渐变为特定透明度 `$(selector).fadeTo(speed,opacity,callback)` ：`$(&quot;#div2&quot;).fadeTo(&quot;slow&quot;,0.4);` 
</code></pre><p>speed 和 callback 都是可选参数，opacity 为必需参数</p>
<p>speed 参数规定淡入/淡出的速度，可选值为：”slow”、”fast” 或毫秒值</p>
<p>callback 参数是显示/隐藏完成后所执行的函数名称</p>
<p>opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间)</p>
<p>3.滑动</p>
<pre><code>- 向下滑动 `$(selector).slideDown(speed,callback)` ： `$(&quot;#panel&quot;).slideDown();`

- 向上滑动 `$(selector).slideUp(speed,callback)` : `$(&quot;#panel&quot;).slideUp();`

- 切换向上滑动/向下滑动 `slideToggle()` : `$(&quot;#panel&quot;).slideToggle();`
</code></pre><p>speed 和 callback 都是可选参数</p>
<p>speed 参数规定向上滑动/向下滑动的速度，可选值为：”slow”、”fast” 或毫秒值</p>
<p>callback 参数是向上滑动/向下滑动完成后所执行的函数名称</p>
<p>4.动画</p>
<pre><code>- 自定义动画 `$(selector).animate({params},speed,callback)`
</code></pre><p>params 是必需参数， speed 和 callback 是可选参数</p>
<p>params 参数定义形成动画的 CSS 属性</p>
<p>speed 参数规定效果的时长，可选值为：”slow”、”fast” 或毫秒值</p>
<p>callback 参数是动画完成后所执行的函数名称</p>
<p>注： 默认地，所有 HTML 元素都有一个静态位置，且无法移动，如需对位置进行操作，要记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute！</p>
<pre><code>- 停止动画 ·`$(selector).stop(stopAll,goToEnd);`
</code></pre><p>stopAll 和 goToEnd 都是可选参数</p>
<p>stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行</p>
<p>goToEnd 参数规定是否立即完成当前动画。默认是 false。</p>
<p>默认地，stop() 会清除在被选元素上指定的当前动画</p>
<p><strong> 实例 </strong></p>
<p>使用绝对值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).animate(&#123;</div><div class="line">    left:<span class="string">'250px'</span>,</div><div class="line">    opacity:<span class="string">'0.5'</span>,</div><div class="line">    height:<span class="string">'150px'</span>,</div><div class="line">    width:<span class="string">'150px'</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>使用相对值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"div"</span>).animate(&#123;</div><div class="line">    left:<span class="string">'250px'</span>,</div><div class="line">    height:<span class="string">'+=150px'</span>,</div><div class="line">    width:<span class="string">'+=150px'</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用队列功能 ( 逐一进行 animate 调用 )<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>5.方法连接<br>允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条，这样的话，浏览器就不必多次查找相同的元素。如需链接一个动作，您只需简单地把该动作追加到之前的动作上</p>
<p>例如： 把 <code>css()</code>, <code>slideUp()</code> 和  <code>slideDown()</code> 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，然后向下滑动<br><code>$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);</code></p>
<h1 id="jQuery-操作-HTML-元素和属性"><a href="#jQuery-操作-HTML-元素和属性" class="headerlink" title="jQuery 操作 HTML 元素和属性"></a>jQuery 操作 HTML 元素和属性</h1><p><strong> 对内容操作 </strong></p>
<p>1.获取内容 </p>
<pre><code>- `$(selector).text();` 设置或返回所选元素的文本内容

- `$(selector).html();` 设置或返回所选元素的内容（包括 HTML 标记）

- `$(selector).val();` 设置或返回表单字段的值
</code></pre><p>2.设置内容</p>
<pre><code>- `$(selector).text(string);` 设置所选元素的文本内容

- `$(selector).val(string);` 设置所选元素的内容（包括 HTML 标记）

- `$(selector).html(string);` 设置表单字段的值
</code></pre><p>3.回调函数</p>
<p>i：被选元素列表中当前元素的下标</p>
<p>origText：原始（旧的）值</p>
<p>res：以函数新值返回您希望使用的字符串</p>
<pre><code>- `$(selector).text(function(i,origText){return res;});` 设置或返回所选元素的文本内容

- `$(selector).val(function(i,origText){return res;});` 设置或返回所选元素的内容（包括 HTML 标记）

- `$(selector).html(function(i,origText){return res;});` 设置或返回表单字段的值
</code></pre><p><strong> 对属性操作 </strong></p>
<p>1.获取属性</p>
<pre><code>- `$(selector).attr(&quot;attribute&quot;);` 获取指定元素的所选属性
</code></pre><p>2.设置属性</p>
<pre><code>- `$(selector).attr(&quot;attribute&quot;,&quot;value&quot;);` 设置所选属性的值

- `$(selector).attr({&quot;attribute1&quot;:&quot;value1&quot;, &quot;attribute2&quot;:&quot;value2&quot;});` 同时设置多个属性的值
</code></pre><p>3.attr() 的回调函数</p>
<p>i ： 被选元素列表中当前元素的下标</p>
<p>origValue : 原始（旧的）值</p>
<p>res ： 以函数新值返回您希望使用的字符串</p>
<pre><code>- `$(selector).attr(&quot;attribute&quot;,function(i,origValue){return res});`
</code></pre><p><strong> 对元素/内容操作 </strong></p>
<p>与前面的 对内容操作 不同的是：上面的三个方法会将原来的值覆盖，而这里的方法是在原值基础上进行修改</p>
<p>1.添加</p>
<p>参数可以是多个，如果多个含有 html 的内容，则相当于增加了多个 html 元素</p>
<pre><code>- `$(selector).append(&quot;text&quot;);` 在被选元素的结尾插入内容

- `$(selector).prepend(&quot;text&quot;);` 在被选元素的开头插入内容

- `$(selector).prepend(&quot;text&quot;);` 在被选元素之后插入内容

- `$(selector).before(&quot;text&quot;);` 在被选元素之前插入内容
</code></pre><p>2.删除</p>
<pre><code>- `$(selector).remove();` 删除被选元素（及其子元素）

- `$(selector).empty();` 从被选元素中删除子元素

- `$(selector).remove(selector);` 删除指定选择器的元素
</code></pre><p><strong> 对 CSS 元素操作 </strong></p>
<p>前三种方法是针对已经写好的样式</p>
<pre><code>- `$(selector).addClass(&quot;className1 className2&quot;);` 向被选元素添加一个或多个类

- `$(selector).removeClass(&quot;className1 className2&quot;);` 从被选元素删除一个或多个类

- `$(selector).toggleClass(&quot;className&quot;);` 对被选元素进行添加/删除类的切换操作

- `$(selector).css();`返回样式属性

- `$(selector).css(&quot;attribute&quot;,&quot;value&quot;);`设置单个样式属性

- `$(selector).css({&quot;propertyname&quot;:&quot;value&quot;,&quot;propertyname&quot;:&quot;value&quot;,...});`设置多个样式属性
</code></pre><p><strong> 对尺寸操作 </strong></p>
<p>注意参数，中间四种没有没有参数，不能进行设置</p>
<pre><code>- `$(selector).width(&quot;text&quot;);` 设置或返回元素的宽度（不包括内边距、边框或外边距）

- `$(selector).height(&quot;text&quot;);` 设置或返回元素的高度（不包括内边距、边框或外边距）

- `$(selector).innerWidth();`返回元素的宽度（包括内边距）

- `$(selector).innerHeight(&quot;);`返回元素的高度（包括内边距）

- `$(selector).outerWidth();`返回元素的宽度（包括内边距和边框）

- `$(selector).outerHeight();` 返回元素的高度（包括内边距和边框）

- `$(selector).outerWidth(true);`返回元素的宽度（包括内边距、边框和外边距）

- `$(selector).outerHeight(true);` 返回元素的高度（包括内边距、边框和外边距）
</code></pre><h1 id="jQuery-遍历-DOM"><a href="#jQuery-遍历-DOM" class="headerlink" title="jQuery 遍历 DOM"></a>jQuery 遍历 DOM</h1><p><strong> 祖先 </strong></p>
<p>向上遍历 DOM 树</p>
<pre><code>- `$(selector).parent();` 返回被选元素的直接父元素，该方法只会向上一级对 DOM 树进行遍历

- `$(selector).parents();` 返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (&lt;html&gt;)

- `$(selector).parents(selector);` 返回经过过滤的所有祖先元素，它一路向上直到文档的根元素 (&lt;html&gt;)

- `$(selector).parentsUntil() ;`返回介于两个给定元素之间的所有祖先元素
</code></pre><p><strong> 祖先 </strong></p>
<p>向下遍历 DOM 树，以查找元素的后代</p>
<pre><code>- `$(selector).children();` 返回被选元素的所有直接子元素，该方法只会向下一级对 DOM 树进行遍历

 - `$(selector).children(selector);` 返回被选元素的经过过滤的子元素，该方法只会向下一级对 DOM 树进行遍历

- `$(selector).find(&quot;selector&quot;);` 返回被选元素的后代元素，一路向下直到最后一个后代(此方法必须有参数，如果是全部则为 &quot;*&quot; )
</code></pre><p><strong> 同胞 </strong></p>
<p> DOM 树中遍历元素的同胞元素</p>
<pre><code>- `$(selector).siblings(selector);` 返回被选元素的所有同胞元素（selector可选）

 - `$(selector).next();` 返回被选元素的下一个同胞元素

- `$(selector).nextAll();` 返回被选元素的所有跟随的同胞元素

- `$(selector).nextUntil(selecotr);` 返回介于两个给定参数之间的所有跟随的同胞元素

- prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞元素向后遍历，而不是向前）
</code></pre><p><strong> 过滤 </strong></p>
<p>允许您基于其在一组元素中的位置来选择一个特定的元素</p>
<pre><code> - `$(selector).first();` 返回被选元素的首个元素

- `$(selector).last();` 返回被选元素的最后一个元素

- `$(selector).eq();` 返回被选元素中带有指定索引号的元素（索引号从 0 开始）

- `$(selector).filter(selector);` 不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回

- `$(selector).not(selector);` not() 方法与 filter() 相反，返回不匹配标准的所有元素
</code></pre><h1 id="jQuery-Ajax"><a href="#jQuery-Ajax" class="headerlink" title="jQuery Ajax"></a>jQuery Ajax</h1><p>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）</p>
<p>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示</p>
<p><strong> load 方法</strong></p>
<pre><code>- `$(selector).load(URL,data,callback);` 
方法从服务器加载数据，并把返回的数据放入被选元素中
</code></pre><p>必需的 URL 参数规定您希望加载的 URL。<br>可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。<br>可选的 callback 参数是 load() 方法完成后所执行的函数名称</p>
<p>callback 回调函数</p>
<p><code>$(selector).load(URL,data,function(responseTxt,statusTxt,xhr){});</code></p>
<p>responseTxt - 包含调用成功时的结果内容<br>statusTXT - 包含调用的状态<br>xhr - 包含 XMLHttpRequest 对象</p>
<p>responseTxt - 包含调用成功时的结果内容<br>statusTXT - 包含调用的状态<br>xhr - 包含 XMLHttpRequest 对象</p>
<p><strong> get/post 方法</strong></p>
<p>必需的 URL 参数规定您希望请求的 URL<br>可选的 callback 参数是请求成功后所执行的函数名</p>
<pre><code>- `$.get(URL,callback);`
通过 HTTP GET 请求从服务器上请求数据
</code></pre><p>GET - 从指定的资源请求数据<br>GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据</p>
<pre><code>- `$.post(URL,data,callback);`
通过 HTTP POST 请求从服务器上请求数据
</code></pre><p>data 是要提交给服务器的数据，如果数据有多个，使用 json 格式<br>POST - 向指定的资源提交要处理的数据<br>POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据</p>
<p>回调函数</p>
<p>data : 存有被请求页面的内容<br>status : 存有请求的状态( success/fail )<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</div><div class="line">    alert(<span class="string">"Data: "</span> + data + <span class="string">"\nStatus: "</span> + status);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>注意： ajax 不能访问本地文件，需要解决跨域访问的问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人建议：学习 jQuery 前先掌握基本的 JavaScrpit 语法，特别是对函数要掌握，jQuery 基本上是使用函数。&lt;/p&gt;
    
    </summary>
    
      <category term="javascrpit" scheme="http://www.leozzy.com/categories/javascrpit/"/>
    
      <category term="jQuery" scheme="http://www.leozzy.com/categories/javascrpit/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://www.leozzy.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>用结果理解 javascript 原型</title>
    <link href="http://www.leozzy.com/2017/09/30/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%90%86%E8%A7%A3javascript%E5%8E%9F%E5%9E%8B/"/>
    <id>http://www.leozzy.com/2017/09/30/一张图理解javascript原型/</id>
    <published>2017-09-30T11:49:48.000Z</published>
    <updated>2017-10-21T04:21:02.323Z</updated>
    
    <content type="html"><![CDATA[<h5 id="每个函数都有一个-prototype-属性，-对象都有-proto-属性，所有实例的原型引用的是函数的-prototype-属性，还得注意函数也是对象。"><a href="#每个函数都有一个-prototype-属性，-对象都有-proto-属性，所有实例的原型引用的是函数的-prototype-属性，还得注意函数也是对象。" class="headerlink" title="每个函数都有一个 prototype 属性， 对象都有 proto 属性，所有实例的原型引用的是函数的 prototype 属性，还得注意函数也是对象。"></a>每个函数都有一个 prototype 属性， 对象都有 <strong>proto</strong> 属性，所有实例的原型引用的是函数的 prototype 属性，还得注意函数也是对象。</h5><a id="more"></a>
<ul>
<li>对于所有的对象，都有__proto__属性，这个属性对应该对象的原型</li>
<li>对于函数对象，除了__proto__属性之外，还有prototype属性，当一个函数被用作构造函数来创建实例时，该函数的prototype属性值将被作为原型赋值给所有对象实例（也就是设置实例的__proto__属性）</li>
</ul>
<hr>
<p><img src="https://i.imgur.com/AXiNJPB.png" alt="代码1"></p>
<hr>
<p><img src="https://i.imgur.com/rxKS5Wr.png" alt="代码运行结果1"></p>
<hr>
<p><img src="https://i.imgur.com/hamoDrc.png" alt="代码2"></p>
<hr>
<p><img src="https://i.imgur.com/lAvstEk.png" alt="代码运行结果2"></p>
<hr>
<p><img src="https://i.imgur.com/QGgHLKk.png" alt="代码3"></p>
<hr>
<p><img src="https://i.imgur.com/HR0Ek5X.png" alt="代码运行结果3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;每个函数都有一个-prototype-属性，-对象都有-proto-属性，所有实例的原型引用的是函数的-prototype-属性，还得注意函数也是对象。&quot;&gt;&lt;a href=&quot;#每个函数都有一个-prototype-属性，-对象都有-proto-属性，所有实例的原型引用的是函数的-prototype-属性，还得注意函数也是对象。&quot; class=&quot;headerlink&quot; title=&quot;每个函数都有一个 prototype 属性， 对象都有 proto 属性，所有实例的原型引用的是函数的 prototype 属性，还得注意函数也是对象。&quot;&gt;&lt;/a&gt;每个函数都有一个 prototype 属性， 对象都有 &lt;strong&gt;proto&lt;/strong&gt; 属性，所有实例的原型引用的是函数的 prototype 属性，还得注意函数也是对象。&lt;/h5&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leozzy.com/categories/javascript/"/>
    
    
      <category term="javascript 原型" scheme="http://www.leozzy.com/tags/javascript-%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>javascript 创建对象的方法</title>
    <link href="http://www.leozzy.com/2017/09/30/javascript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://www.leozzy.com/2017/09/30/javascript创建对象的方法/</id>
    <published>2017-09-30T10:39:19.000Z</published>
    <updated>2017-10-21T04:20:17.169Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript 对象和原型是一个重点难点，今天就总结一下 javascript 创建对象的几种方式</p>
<a id="more"></a>
<hr>
<h4 id="“继承”（原型指向）"><a href="#“继承”（原型指向）" class="headerlink" title="“继承”（原型指向）"></a>“继承”（原型指向）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Student = &#123;</div><div class="line">  name : <span class="string">"Robot"</span>,</div><div class="line">  height : <span class="number">1.2</span>,</div><div class="line">  run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is running"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">  name : <span class="string">"小明"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.__proto__ = Student;</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);  <span class="comment">//小明</span></div><div class="line">xiaoming.run(); <span class="comment">// 小明 is running</span></div></pre></td></tr></table></figure>
<ol>
<li><p>通过指定 <code>xiaoming</code> 的原型， 看上去 <code>xiaoming</code> 仿佛是从 <code>Student</code> 继承下来的</p>
</li>
<li><p>JavaScript 的原型链和 Java 的 Class 区别就在，它没有 “Class” 的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已</p>
</li>
<li><p>在编写 JavaScript 代码时，不要直接用 <code>obj.__proto__</code> 去改变一个对象的原型，并且，低版本的 IE 也无法使用 <code>__proto__</code></p>
</li>
</ol>
<hr>
<h4 id="使用-Object-create-创建对象"><a href="#使用-Object-create-创建对象" class="headerlink" title="使用 Object.create() 创建对象"></a>使用 <code>Object.create()</code> 创建对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Student = &#123;</div><div class="line">  name : <span class="string">"Robot"</span>,</div><div class="line">  height : <span class="number">1.2</span>,</div><div class="line">  run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"is running"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = <span class="built_in">Object</span>.create(Student);</div><div class="line">xiaoming.name = <span class="string">"小明"</span>;</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);<span class="comment">//小明</span></div><div class="line"><span class="built_in">console</span>.log(Student.name);<span class="comment">//Robot</span></div><div class="line">xiaoming.__proto__ === Student; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>此种方法不同与构造函数，刚创建的对象只有原型中的默认值</p>
<hr>
<h4 id="基于-Object-create-创建可初始化的对象"><a href="#基于-Object-create-创建可初始化的对象" class="headerlink" title="基于 Object.create() 创建可初始化的对象"></a>基于 <code>Object.create()</code> 创建可初始化的对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Student = &#123;</div><div class="line">    name: <span class="string">'Robot'</span>,</div><div class="line">    height: <span class="number">1.2</span>,</div><div class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is running...'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> stu = <span class="built_in">Object</span>.create(Student);</div><div class="line">  stu.name = name;</div><div class="line">  <span class="keyword">return</span> stu;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = createStudent(<span class="string">"小明"</span>);</div><div class="line">xiaoming.run();</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);</div></pre></td></tr></table></figure>
<hr>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'hello,'</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'小明'</span>);</div><div class="line">xiaoming.hello();</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);</div></pre></td></tr></table></figure>
<ol>
<li>通过 <code>new</code> 关键字创建对象并且可以初始化值</li>
<li>如果不写 <code>new</code>，这就是一个普通函数，它返回 <code>undefined</code>。但是，如果写了 <code>new</code>，它就变成了一个构造函数，它绑定的 <code>this</code> 指向新创建的对象，并默认返回 <code>this</code>，也就是说，不需要在最后写 <code>return this</code>;</li>
<li>原型链： <code>xiaoming ----&gt; Student.prototype ----&gt; Object.prototype ----&gt; null</code></li>
</ol>
<hr>
<h4 id="构造函数，并且创建共享函数，节省内存"><a href="#构造函数，并且创建共享函数，节省内存" class="headerlink" title="构造函数，并且创建共享函数，节省内存"></a>构造函数，并且创建共享函数，节省内存</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'小明'</span>);</div><div class="line">xiaoming.hello();</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);</div></pre></td></tr></table></figure>
<ol>
<li><code>Student.prototype</code> 是所有 <code>Student</code> 实例的共同原型，所以将方法定义在它上面</li>
<li>如果写在构造函数里面，每创建一个实例，每个函数也会开辟内存</li>
</ol>
<h4 id="创建对象忘记写关键字-new-如何应对"><a href="#创建对象忘记写关键字-new-如何应对" class="headerlink" title="创建对象忘记写关键字 new 如何应对"></a>创建对象忘记写关键字 new 如何应对</h4><ol>
<li>在 <code>strict</code> 模式下，<code>this.name = name</code>将报错，因为 <code>this</code> 绑定为 <code>undefined</code>，在非 <code>strict</code> 模式下，<code>this.name = name</code> 不报错，因为 <code>this</code> 绑定为 <code>window</code>，于是无意间创建了全局变量<code>name</code>，并且返回 <code>undefined</code>，这个结果更糟糕。</li>
<li><p>封装 <code>new</code> 操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = obj.name || <span class="string">'匿名'</span>;</div><div class="line">  <span class="keyword">this</span>.grade = obj.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Student(obj || &#123;&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = createStudent(&#123;<span class="attr">name</span>:<span class="string">'小明'</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(xiaoming.name);<span class="comment">//小明</span></div><div class="line"><span class="built_in">console</span>.log(xiaoming.grade);<span class="comment">//1</span></div></pre></td></tr></table></figure>
</li>
<li><p>不需要用 <code>new</code> 创建对象</p>
</li>
<li>与 基于 <code>Object.create()</code> 创建可初始化的对象 的方式类似，但优点在于通过 JSON 作为参数，参数非常灵活，可以不传参数使用默认值</li>
<li>参数没有顺序，传一个 JSON 对象即可</li>
</ol>
<hr>
<p>以上就是总结的几种创建对象的方法，注意对比它们之间的差别</p>
<p>资料参考来源：<a href="http://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰的官方网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript 对象和原型是一个重点难点，今天就总结一下 javascript 创建对象的几种方式&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leozzy.com/categories/javascript/"/>
    
    
      <category term="javascript 对象" scheme="http://www.leozzy.com/tags/javascript-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>本周总结(bug困扰)</title>
    <link href="http://www.leozzy.com/2017/09/23/%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93-bug%E5%9B%B0%E6%89%B0/"/>
    <id>http://www.leozzy.com/2017/09/23/本周总结-bug困扰/</id>
    <published>2017-09-23T14:58:45.000Z</published>
    <updated>2017-10-21T04:20:43.916Z</updated>
    
    <content type="html"><![CDATA[<p>Error : java.lang.LinkageError: loader constraint violation: loader (instance of org/apache/jasper/servlet/J</p>
<a id="more"></a>
<p>大概就是这个错误， 困扰了三天。</p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>周三：</p>
<ul>
<li><p>开心地准备开发， leader 分配好任务</p>
</li>
<li><p>把基础环境配置好， 需求大致了解清楚</p>
</li>
<li><p>统一用 maven 方式启动， 加载启动没问题</p>
</li>
<li><p>访问页面时就出现上面那个从未见过的 Error </p>
</li>
<li><p>Google 的结果都是说 jar 包冲突， 那么就开始对比 maven 项目与 jdk 中的 jar 包， 把 Google 搜出来前两页答案都试了一遍， 结果还是 Error </p>
</li>
<li><p>leader 远程帮忙找问题， 也说是 jar 包的问题， 但是工作忙也暂时解决不了</p>
</li>
<li><p>换 tomcat 方式启动， 成功访问， 着手写代码</p>
</li>
</ul>
<p>周四</p>
<ul>
<li><p>上午把基本的代码写完了，下午 tomcat 启动报错， 都是关于 bean 注入的错误</p>
</li>
<li><p>怎么找也找不出哪里有问题， 远程服务也刚好出现问题， 结果不知道到底是哪边产生的错误</p>
</li>
<li><p>一天差不多就这样过去了</p>
</li>
</ul>
<p>周五</p>
<ul>
<li><p>远程服务已经正确， 队友都能正常跑起来了， 然后自己还在找 bug </p>
</li>
<li><p>又是 Google + 远程排错， 结果还是回到周三出现的错误， tomcat 和 maven 两种启动都报错</p>
</li>
<li><p>从半上午一直到下午都是在找 bug， 可能是自己不信没有解决不了的问题吧</p>
</li>
<li><p>从配环境 N 次到重装 Eclipse， 问题仍无法解决， leader 也在考虑要不要重装系统， 这似乎不切实际</p>
</li>
</ul>
<p>周六</p>
<ul>
<li>一大早把 maven 、jdk 重装了一遍， maven 启动居然正常了！！！</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>因为一个错误花费了大量的时间， 不能说没有收获， 但是这太不值了。 所以以后如果用了比较长的时间还不能解决一个问题的话， 最好把底层的东西都给重新配置下， 很有可能不是表面错误引起的。</p>
<p>每周都觉得时间过得特别快， 很大一部分原因就是自己没有把握好时间， 还有最重要的一点就是效率问题， 必须提高自学能力和效率。</p>
<p>解决问题也是一种必须的能力， 在积累中成长， 在这里记录自己的成长。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Error : java.lang.LinkageError: loader constraint violation: loader (instance of org/apache/jasper/servlet/J&lt;/p&gt;
    
    </summary>
    
      <category term="时光" scheme="http://www.leozzy.com/categories/%E6%97%B6%E5%85%89/"/>
    
    
      <category term="时光" scheme="http://www.leozzy.com/tags/%E6%97%B6%E5%85%89/"/>
    
  </entry>
  
  <entry>
    <title>初识JavaScript原型</title>
    <link href="http://www.leozzy.com/2017/09/13/%E5%88%9D%E8%AF%86JavaScript%E5%8E%9F%E5%9E%8B/"/>
    <id>http://www.leozzy.com/2017/09/13/初识JavaScript原型/</id>
    <published>2017-09-13T15:54:31.000Z</published>
    <updated>2017-10-21T04:20:49.520Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始学习 JavaScript ， 感觉很多细节， 很多需要注意的地方， 把自己觉得细节的地方整理了一篇文章放在前面。</p>
<a id="more"></a>
<p>这里是解决碰到的第一个难点， 如何理解 JavaScript 原型。 在网上看到一篇文章， 看完之后豁然开朗， 对原型大概理解了。 为什么说大概呢， 毕竟自己还没运用起来， 只有深入理解并且会用了才是理解到位。</p>
<p>感谢作者的分享， 链接： <a href="http://www.cnblogs.com/wilber2013/p/4924309.html" target="_blank" rel="noopener">彻底理解 JavaScript 原型</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始学习 JavaScript ， 感觉很多细节， 很多需要注意的地方， 把自己觉得细节的地方整理了一篇文章放在前面。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leozzy.com/categories/javascript/"/>
    
    
      <category term="javascript 原型" scheme="http://www.leozzy.com/tags/javascript-%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>javascript 细节 - 基础</title>
    <link href="http://www.leozzy.com/2017/09/11/javascript%E5%9F%BA%E7%A1%80-%E6%B3%A8%E6%84%8F%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://www.leozzy.com/2017/09/11/javascript基础-注意点汇总/</id>
    <published>2017-09-11T11:25:04.000Z</published>
    <updated>2017-10-21T05:02:07.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法部分"><a href="#语法部分" class="headerlink" title="语法部分"></a>语法部分</h3><ol>
<li>type 属性： 默认的 type 就是 javascript， 所以不必显式指定 type 为 javascript</li>
</ol>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">...</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p>javascript 不强制在每个语句结尾加 “；” ， javascript 会自动加分号， 但是在某些情况下会改变程序的语义， 所以最好主动加 “；”</p>
</li>
<li><p>两个相等运算符比较</p>
<ul>
<li><p>‘==’ 相等（  值相等 ）， 它会自动转换数据类型再比较， 很多时候会得到非常诡异的结果</p>
</li>
<li><p>‘===’ 严格相等（ 数据类型和值都相等 ） , 它不会自动转换数据类型， 如果数据类型不一致， 返回false， 如果一致， 再比较</p>
</li>
</ul>
</li>
<li><p>NaN 与所有其他值都不相等， 包括它自己：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p> 唯一能判断 <code>NaN</code> 的方法是通过 <code>isNaN()</code> 函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>浮点数比较</p>
<p> 浮点数在运算过程中会产生误差， 因为计算机无法精确表示无限循环小数。 要比较两个浮点数是否相等， 只能计算它们之差的绝对值， 看是否小于某个阈值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>null 和 undefined</p>
<p> 大多数情况下， 我们都应该用 <code>null</code>， <code>undefined</code> 仅仅在判断函数参数是否传递的情况下有用</p>
</li>
<li><p>出于代码的可读性考虑， 创建数组建议用 <code>[]</code>， 而不使用 <code>new Array()</code></p>
</li>
<li><p>如果一个变量没有通过 <code>var</code> 申明就被使用， 那么该变量就自动被申明为全局变量。 使用 <code>var</code> 申明的变量则不是全局变量， 它的范围被限制在该变量被申明的函数体内</p>
</li>
<li><p>启用 strict 模式（ 强制通过 <code>var</code> 声明变量）： 在 javascript 代码第一行写上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>多行字符串用反引号表示  ` … ` </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">`这是一个</span></div><div class="line"><span class="string">多行</span></div><div class="line"><span class="string">字符串`</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>模版字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年 <span class="subst">$&#123;age&#125;</span> 岁了!`</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>要获取字符串某个指定位置的字符， 使用类似 <code>Array</code> 的下标操作， 索引号从 0 开始。 字符串是不可变的， 如果对字符串的某个索引赋值， 不会有任何错误， 但是， 也没有任何效果</p>
</li>
<li><p>直接给 <code>Array</code> 的 <code>length</code> 赋一个新的值会导致 <code>Array</code> 大小的变化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.length; <span class="comment">// 3</span></div><div class="line">arr.length = <span class="number">6</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果通过索引赋值时， 索引超过了范围， 同样会引起 <code>Array</code> 大小的变化， 但是不会有任何错误， 在编写代码时， 不建议直接修改 <code>Array</code> 的大小， 访问索引时要确保索引不会越界</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr[<span class="number">5</span>] = <span class="string">'x'</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></div></pre></td></tr></table></figure>
</li>
<li><p>数字 30 和字符串 ‘30’ 是不同的元素</p>
</li>
<li><p><code>slice()</code> 的起止参数包括开始索引， 不包括结束索引。</p>
</li>
<li><p>如果不给 <code>slice()</code> 传递任何参数， 它就会从头到尾截取所有元素。 利用这一点， 我们可以很容易地复制一个 <code>Array</code></p>
</li>
<li><p>空数组继续 <code>pop</code> 不会报错，而是返回 <code>undefined</code></p>
</li>
<li><p><code>concat()</code> 方法并没有修改当前 <code>Array</code>， 而是返回了一个新的 <code>Array</code>，<code>concat()</code> 方法可以接收任意个元素和 <code>Array</code>， 并且自动把 <code>Array</code> 拆开， 然后全部添加到新的 <code>Array</code> 里</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// ['A', 'B', 'C', 1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>javascript</code> 对象属性名必须是一个有效的变量名。 如果属性名包含特殊字符， 就必须用 <code>&#39;&#39;</code> 括起来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaohong = &#123;</div><div class="line">    name: <span class="string">'小红'</span>,</div><div class="line">    <span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>xiaohong</code> 的属性名 <code>middle-school</code> 不是一个有效的变量， 就需要用 <code>&#39;&#39;</code> 括起来。 访问这个属性也无法使用 <code>.</code> 操作符， 必须用 <code>[&#39;xxx&#39;]</code> 来访问：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xiaohong[<span class="string">'middle-school'</span>]; <span class="comment">// 'No.1 Middle School'</span></div><div class="line">xiaohong[<span class="string">'name'</span>]; <span class="comment">// '小红'</span></div><div class="line">xiaohong.name; <span class="comment">// '小红'</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果我们要检测 <code>xiaoming</code> 是否拥有某一属性， 可以用in操作符,  不过要小心， 如果 <code>in</code> 判断一个属性存在， 这个属性不一定是<code>xiaoming</code> 的， 它可能是 <code>xiaoming</code> 继承得到的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'name'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>要判断一个属性是否是 <code>xiaoming</code> 自身拥有的，而不是继承得到的，可以用 <code>hasOwnProperty()</code> 方法</p>
</li>
<li><p>JavaScript把 <code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code> 和空字符串  <code>&#39;&#39;</code> 视为 <code>false</code>，其他值一概视为 <code>true</code></p>
</li>
<li><p>由于 <code>Array</code> 也是对象， 而它的每个元素的索引被视为对象的属性， 因此， <code>for ... in</code> 循环可以直接循环出 <code>Array</code> 的索引</p>
</li>
<li><p><code>for ... in</code> 循环由于历史遗留问题， 它遍历的实际上是对象的属性名称， <code>for ... of</code> 循环则完全修复了这些问题， 它只循环集合本身的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.name = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</div><div class="line">    alert(x); <span class="comment">// '0', '1', '2', 'name'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.name = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</div><div class="line">    alert(x); <span class="comment">// 'A', 'B', 'C'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>函数如果没有 <code>return</code> 语句， 函数执行完毕后也会返回结果， 只是结果为 <code>undefined</code></p>
</li>
<li><p>由于 <code>JavaScript</code> 允许传入任意个参数而不影响调用， 因此传入的参数比定义的参数多也没有问题， 虽然函数内部并不需要这些参数， 传入的参数比定义的少也没有问题</p>
</li>
<li><p>关键字 <code>arguments</code> 类似 <code>Array</code> 但它不是一个 <code>Array</code></p>
</li>
<li><p>不在任何函数内定义的变量就具有全局作用域。 实际上， <code>JavaScript</code> 默认有一个全局对象 <code>window</code>。 以变量方式 <code>var foo = function () {}</code> 定义的函数实际上也是一个全局变量。</p>
</li>
<li><p>用 <code>var that = this;</code> ， 你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。 对于普通函数调用， 通常把 <code>this</code> 绑定为 <code>null</code>。</p>
</li>
<li><p><code>apply()</code> 与 <code>call()</code>的唯一区别</p>
<ul>
<li><p><code>apply()</code> 把参数打包成 <code>Array</code> 再传入；</p>
</li>
<li><p><code>call()</code> 把参数按顺序传入。</p>
</li>
</ul>
</li>
<li><p>所有实例的原型引用的是函数的 prototype 属性</p>
</li>
<li><p>箭头函数</p>
<ul>
<li><p>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SyntaxError:</span></div><div class="line">x =&gt; &#123; <span class="attr">foo</span>: x &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>因为和函数体的 <code>{ ... }</code> 有语法冲突，所以要改为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ok:</span></div><div class="line">x =&gt; (&#123; <span class="attr">foo</span>: x &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>箭头函数内部的 <code>this</code> 是词法作用域（ 写代码或者定义时确定的 作用域，动态作用域是在运行时确定 ），由上下文确定。箭头函数完全修复了 <code>this</code> 的指向，<code>this</code> 总是指向词法作用域</p>
</li>
</ol>
<h3 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h3><ol>
<li>如果我们在使用 <code>Number</code>、<code>Boolean</code> 和 <code>String</code> 时， 没有写 <code>new</code> ，<code>Number()</code>、<code>Boolean()</code> 和 <code>String()</code> 被当做普通函数，把任何类型的数据转换为 <code>number</code>、<code>boolean</code> 和 <code>string</code> 类型（注意不是其包装类型）</li>
<li><p>不要使用 <code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code> 创建包装对象；</p>
</li>
<li><p>用 <code>parseInt()</code> 或 <code>parseFloat()</code> 来转换任意类型到 <code>number</code>；</p>
</li>
<li><p>用 <code>String()</code> 来转换任意类型到 <code>string</code> ，或者直接调用某个对象的 <code>toString()</code> 方法；</p>
</li>
<li><p>通常不必把任意类型转换为 <code>boolean</code> 再判断，因为可以直接写 <code>if (myVar) {...}</code> ；</p>
</li>
<li><p><code>typeof</code> 操作符可以判断出 <code>number</code> 、<code>boolean</code>、<code>string</code>、<code>function</code> 和 <code>undefined</code> ；</p>
</li>
<li><p>判断 <code>Array</code> 要使用 <code>Array.isArray(arr)</code>；</p>
</li>
<li><p>判断 <code>null</code> 请使用 <code>myVar === null</code>；</p>
</li>
<li><p>判断某个全局变量是否存在用 <code>typeof window.myVar === &#39;undefined&#39;</code>；</p>
</li>
<li><p>函数内部判断某个变量是否存在用 <code>typeof myVar === &#39;undefined&#39;</code>。</p>
</li>
<li><p>任何对象都有 <code>toString()</code> 方法吗？ <code>null</code> 和 <code>undefined</code> 就没有！</p>
</li>
<li><p><code>number</code> 对象调用 <code>toString()</code> 报 <code>SyntaxError</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">123.</span>toString(); <span class="comment">// SyntaxError</span></div></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">123.</span>.toString(); <span class="comment">// '123', 注意是两个点！</span></div><div class="line">(<span class="number">123</span>).toString(); <span class="comment">// '123'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>注：以上内容整理自<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;语法部分&quot;&gt;&lt;a href=&quot;#语法部分&quot; class=&quot;headerlink&quot; title=&quot;语法部分&quot;&gt;&lt;/a&gt;语法部分&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;type 属性： 默认的 type 就是 javascript， 所以不必显式指定 type 为 javascript&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.leozzy.com/categories/javascript/"/>
    
    
      <category term="javascript 细节" scheme="http://www.leozzy.com/tags/javascript-%E7%BB%86%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 网络结构</title>
    <link href="http://www.leozzy.com/2017/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/"/>
    <id>http://www.leozzy.com/2017/09/11/计算机网络-网络结构/</id>
    <published>2017-09-11T09:44:57.000Z</published>
    <updated>2017-10-21T04:20:55.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h2><ul>
<li>计算机网络<ul>
<li>结点： 计算机、 集线器、 交换机或路由器等</li>
</ul>
</li>
</ul>
<a id="more"></a>
<pre><code>- 链路： 连接结点
</code></pre><ul>
<li><p>互联网的组成</p>
<ul>
<li><p>边缘部分： 由所有连接在互联网上的主机（ 端系统 ）组成， 用户直接使用。以下是端系统间的通信方式</p>
<ol>
<li><p>客户-服务器方式</p>
</li>
<li><p>对等连接方式（ P2P ）</p>
</li>
</ol>
</li>
<li><p>核心部分： 由大量网络和连接网络的路由器组成， 为边缘部分提供连通性和交换</p>
<ul>
<li>路由器： 实现分组交换的关键构件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><ul>
<li><p>电路交换： 建立连接（ 占用通信资源 ） -&gt; 通话（ 一直占用通信资源 ） -&gt; 释放连接（ 归还通信资源 ）</p>
<ul>
<li>特点：在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</li>
</ul>
</li>
</ul>
<ul>
<li><p>分组交换： 采用存储转发技术。 路由器收到一个分组， 先暂时存储， 检查其首部， 查找转发表， 按照首部中的目的地址， 找到合适的接口转发出去， 把分组交给下一个路由器。</p>
<ul>
<li><p>构成： 报文 = n 个分组， 分组 = 首部 + 数据段</p>
</li>
<li><p>特点</p>
<ol>
<li><p>高效： 在分组传输的过程中动态分配传输宽带， 对通信链路是逐段占用</p>
</li>
<li><p>灵活： 为每一个分组独立地选择最合适的转发路由</p>
</li>
<li><p>迅速： 以分组作为传送单位， 可以先不建立连接就能向其他主机发送分组</p>
</li>
<li><p>可靠： 保证可靠性的网络协议： 分布式多路由的分组交换网， 使网络有很好的生存性</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>报文交换： 20 世纪 40 年代用于电报通信， 基于存储转发原理</p>
</li>
</ul>
<h5 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h5><ul>
<li><p>电路交换： 整个报文的比特流连续地从源点直达重点， 好像在一个管道中传送</p>
</li>
<li><p>报文交换： 整个报文先传送到相邻结点， 全部存储下来后查找转发表， 转发到下一个结点</p>
</li>
<li><p>分组交换： 单个分组（ 这只是整个报文的一部分 ）传送到相邻结点， 存储下来后查找转发表， 转发到下一个结点</p>
</li>
</ul>
<h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><ul>
<li><p>按照网络的作用范围分类</p>
<ol>
<li><p>广域网 WAN： 几十到几千公里</p>
</li>
<li><p>城域网 MAN： 5- 50 KM</p>
</li>
<li><p>局域网 LAN： 1 KM</p>
</li>
<li><p>个人区域网 PAN： 10M</p>
</li>
</ol>
</li>
<li><p>按照网络的使用者分类</p>
<ol>
<li><p>公用网： 电信公司（ 国有或私有 ）出资建造的大型网络</p>
</li>
<li><p>专用网： 某个部门为满足本单位的特殊业务工作的需要而建造的网络</p>
</li>
</ol>
</li>
</ul>
<h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><ul>
<li><p>计算机网络的性能指标</p>
<ol>
<li><p>速率（ 数据率、 比特率 ），单位： bit/s</p>
</li>
<li><p>带宽</p>
<ul>
<li><p>某个信号具有的带宽频度，单位： Hz</p>
</li>
<li><p>单位时间内某信道所能通过的 “最高数据率”， 单位：bit/s</p>
</li>
</ul>
</li>
<li><p>吞吐量： 单位时间内通过某个网络的实际的数据量</p>
</li>
<li><p>时延（ 延迟、 迟延 ）： 数据从网络的一段传送到另一端所需的时间，总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p>
<ul>
<li><p>发送时延： 主机或路由器发送数据帧所需要的时间</p>
</li>
<li><p>传播时延： 电磁波在信道中传播一定距离需要花费的时间</p>
</li>
<li><p>处理时延： 主机或路由器在收到分组时要花费一定的时间进行处理</p>
</li>
<li><p>排队时延： 分组在经过网络传输时， 要经过许多路由器， 分组在进入路由器后要先在输入队列中排队等待处理</p>
</li>
</ul>
</li>
<li><p>时延带宽积： 传播时延 * 带宽</p>
</li>
<li><p>往返时间RTT： 双向交互一次所需的时间</p>
</li>
<li><p>利用率： 信道利用率和网络利用率</p>
</li>
</ol>
</li>
<li><p>计算机网络的非性能特征</p>
<ol>
<li>费用</li>
<li>质量</li>
<li>标准化</li>
<li>可靠性</li>
<li>可扩展性和可升级性</li>
<li>易于管理和维护</li>
</ol>
</li>
</ul>
<h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><ul>
<li><p>OSI 的七层协议： 1. 物理层 2.数据链路层 3. 网络层 4.运输层 5.会话层 6.表示层 7.应用层</p>
</li>
<li><p>TCP/IP 的四层协议： 1.网络接口层 2.网际层IP 3.运输层（ TCP 或 UDP） 4.应用层（ 各种应用层协议如TELNET, FTP, SMTP 等）</p>
</li>
<li><p>五层协议： </p>
<ol>
<li><p>物理层 ： 考虑用多大的电压代表 “1” 或 “0” ，以及接收方如何识别发送方所发送的比特。还要确定连接电缆的插头应当有多少根引脚以及各引脚应如何连接</p>
</li>
<li><p>数据链路层 ： 两个相邻结点之间传送数据时， 数据链路层将网络层交下来的 IP 数据报组装成帧， 在两个相邻结点间的链路上传送帧</p>
</li>
<li><p>网络层： 为分组交换网上的不同主机提供通信服务</p>
</li>
<li><p>运输层 ： 负责向两台主机进程之间的通信提供通用的网络传输服务</p>
</li>
<li><p>应用层： 通过应用进程间的交互来完成特定网络应用</p>
</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本组成&quot;&gt;&lt;a href=&quot;#基本组成&quot; class=&quot;headerlink&quot; title=&quot;基本组成&quot;&gt;&lt;/a&gt;基本组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机网络&lt;ul&gt;
&lt;li&gt;结点： 计算机、 集线器、 交换机或路由器等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://www.leozzy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.leozzy.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>2017版 Hexo Next主题侧边栏 Sidebar 配置自动展开教程</title>
    <link href="http://www.leozzy.com/2017/09/08/hexo-sidebar-auto/"/>
    <id>http://www.leozzy.com/2017/09/08/hexo-sidebar-auto/</id>
    <published>2017-09-08T11:29:00.000Z</published>
    <updated>2017-10-21T04:20:06.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从搭建博客就想自动展开侧边栏， 结果网上找了很多方法都不生效， 今天找到一篇博客试着重新设置了下， 仍然无效， 但是找到了设置的思路， 于是自己找相关的文件进行设置， 在此分享。</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于主题版本不同， 以下方法只是对应当前版本， 但是思路是一样的， 只是文件的路径和文件名称可能不同</p>
<h2 id="Step-1-修改主题配置文件-display-always"><a href="#Step-1-修改主题配置文件-display-always" class="headerlink" title="Step 1 修改主题配置文件  display: always"></a>Step 1 修改主题配置文件  display: always</h2><p>路径：/hexo/themes/next/_config.yml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sidebar: </div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  position: left</div><div class="line">  #position: right</div><div class="line"></div><div class="line">  #display: post</div><div class="line">  display: always </div><div class="line">  #display: hide</div><div class="line">  #display: remove</div></pre></td></tr></table></figure>
<h2 id="Step-2-修改-motion-js-文件"><a href="#Step-2-修改-motion-js-文件" class="headerlink" title="Step 2 修改 motion.js 文件"></a>Step 2 修改 motion.js 文件</h2><p>路径：/hexo/themes/next/source/js/src/motion.js</p>
<p>在文件末尾</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sidebar: <span class="function"><span class="keyword">function</span> (<span class="params">integrator</span>) </span>&#123;</div><div class="line">  <span class="comment">//if (CONFIG.sidebar.display === 'always') &#123;  //注释</span></div><div class="line">    NexT.utils.displaySidebar();</div><div class="line">  <span class="comment">//&#125; //注释</span></div><div class="line">  integrator.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Step-3-修改post-details-js"><a href="#Step-3-修改post-details-js" class="headerlink" title="Step 3 修改post-details.js"></a>Step 3 修改post-details.js</h2><p>路径： /hexo/themes/next/source/js/src/post-details.js</p>
<p>在文件末尾</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*var $tocContent = $('.post-toc-content');</span></div><div class="line"><span class="comment">  var isSidebarCouldDisplay = CONFIG.sidebar.display === 'post' ||</span></div><div class="line"><span class="comment">      CONFIG.sidebar.display === 'always';</span></div><div class="line"><span class="comment">  var hasTOC = $tocContent.length &gt; 0 &amp;&amp; $tocContent.html().trim().length &gt; 0;</span></div><div class="line"><span class="comment">  if (isSidebarCouldDisplay &amp;&amp; hasTOC) &#123;</span></div><div class="line"><span class="comment">    CONFIG.motion ?</span></div><div class="line"><span class="comment">      (NexT.motion.middleWares.sidebar = function () &#123;</span></div><div class="line"><span class="comment">          NexT.utils.displaySidebar();</span></div><div class="line"><span class="comment">      &#125;) : NexT.utils.displaySidebar();</span></div><div class="line"><span class="comment">  &#125;*/</span></div></pre></td></tr></table></figure>
<p>将以上代码段落全部注释， 只用最后一句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NexT.utils.displaySidebar();</div></pre></td></tr></table></figure>
<h5 id="这是我使用的主题版本的设置方法，-希望对需要的人有帮助"><a href="#这是我使用的主题版本的设置方法，-希望对需要的人有帮助" class="headerlink" title="这是我使用的主题版本的设置方法， 希望对需要的人有帮助"></a>这是我使用的主题版本的设置方法， 希望对需要的人有帮助</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;从搭建博客就想自动展开侧边栏， 结果网上找了很多方法都不生效， 今天找到一篇博客试着重新设置了下， 仍然无效， 但是找到了设置的思路， 于是自己找相关的文件进行设置， 在此分享。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hexo" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.leozzy.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IoC 容器</title>
    <link href="http://www.leozzy.com/2017/09/06/Spring-IoC/"/>
    <id>http://www.leozzy.com/2017/09/06/Spring-IoC/</id>
    <published>2017-09-06T09:15:29.000Z</published>
    <updated>2017-10-21T05:03:12.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>IoC ： Inversion of Control ， 控制反转， 是 Spring 容器的内核， AOP、 声明式事务等功能在此基础上开花结果</li>
</ul>
<a id="more"></a>
<pre><code>-  某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定，由Spring容器借由Bean配置来进行控制
</code></pre><ul>
<li><p>DI  ：  Dependency Injection ， 依赖注入， 此概念用来代替IoC</p>
<ul>
<li>让调用类对某一接口实现类的依赖关系由第三方（ 容器或协作类 ）注入，以移除调用类对某一接口实现类的依赖</li>
</ul>
</li>
</ul>
<h3 id="注入方式："><a href="#注入方式：" class="headerlink" title="注入方式："></a>注入方式：</h3><ul>
<li><p>构造函数注入（ constructor-base ）</p>
<p>   通过调用类的构造函数， 将接口实现类通过构造函数变量传入  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt;</div><div class="line"></div><div class="line">&lt;!-- constructor --&gt;</div><div class="line">    &lt;bean id=<span class="string">"customer"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"io.spring.ioc.di.Customer"</span> &gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"id"</span> value=<span class="string">"1003"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">"Leo"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"gender"</span> value=<span class="string">"男"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"birthdate"</span> ref=<span class="string">"date"</span> /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Integer id, String name, <span class="keyword">char</span> gender, Date birthdate)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.id = id;   </div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.gender = gender;</div><div class="line">    <span class="keyword">this</span>.birthdate = birthdate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>属性注入（ setter-base ）</p>
<p>  属性注入可以有选择地通过Setter方法完成调用类所需依赖的注入（ 方便灵活 ）</p>
<h4 id="Spring-Framework-3-0-之前"><a href="#Spring-Framework-3-0-之前" class="headerlink" title="Spring Framework 3.0 之前"></a>Spring Framework 3.0 之前</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    &lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;!-- setter --&gt;</div><div class="line">    &lt;bean id=<span class="string">"customer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"io.spring.ioc.di.Customer"</span> &gt;</div><div class="line">        &lt;property name=<span class="string">"id"</span> value=<span class="string">"1002"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"name"</span> value=<span class="string">"Leo"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"gender"</span> value=<span class="string">"男"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"birthdate"</span> ref=<span class="string">"date"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    ```                                         </div><div class="line">#### Spring Framework 3.0 开始支持 p 命名空间 :</div><div class="line"></div><div class="line">   ```java</div><div class="line">    &lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt;</div><div class="line">    </div><div class="line">    &lt;!-- setter --&gt;</div><div class="line">    &lt;bean id=<span class="string">"customer"</span> </div><div class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"io.spring.ioc.di.Customer"</span> </div><div class="line">        p:id=<span class="string">"1002"</span> </div><div class="line">        p:name=<span class="string">"Leo"</span></div><div class="line">        p:gender=<span class="string">"男"</span></div><div class="line">        p:birthdate-ref=<span class="string">"date"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>接口注入（ interface-base ）</p>
<p>  将调用类所有依赖注入的方法抽取到一个接口中， 调用类通过实现该接口提供相应的注入方法（ 额外声明接口， 增加类的数目， 效果和属性并无本质区别， 不提倡 ）</p>
</li>
</ul>
<h3 id="自动装配（-autowiring-）"><a href="#自动装配（-autowiring-）" class="headerlink" title="自动装配（ autowiring ）"></a>自动装配（ autowiring ）</h3><h6 id="将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中"><a href="#将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中" class="headerlink" title="将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中"></a>将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中</h6><ol>
<li><p>no ： 默认值， 不启用自动装配，需要显示引用相应的Bean</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>/&gt;</div><div class="line"></div><div class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Student"</span>&gt;</div><div class="line">&lt;property name=<span class="string">"birthdate"</span> ref=<span class="string">"date"</span> /&gt; &lt;!-- 显示引用Bean --&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>byName ： 根据属性名称和被引用的Bean的名称来实现自动注入(setter)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"birthdate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;!-- 假设Student类内部有一个birthdate属性(有getter和setter) --&gt;</div><div class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Student"</span> autowire=<span class="string">"byName"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>byType： 根据属性类型和被引用的Bean的类型来实现自动注入(setter)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"d"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;!-- 假设Student类内部有一个Date类型的属性(有getter和setter) --&gt;</div><div class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Student"</span> autowire=<span class="string">"byType"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>constructor： 根据构造方法的参数类型和被引用的Bean的类型来实现自动注入(constructor)</p>
<ul>
<li><p>当存在多个同种类型的Bean与构造方法中的参数类型相同时</p>
<p>   a-&gt;  如果某个Bean的名称跟构造方法的参数的名称一致， 则根据名称自动装配</p>
<p>   b-&gt;  如果所有Bean的名称跟构造方法的参数的名称都不相同， 则不装配，抛出空指针异常， 不抛出NoUniqueBeanDefinitionException异常</p>
</li>
<li><p>当且仅当与构造方法中的参数类型相同的Bean只有一个时， 此时根据类型自动装配</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 不使用构造实现自动装配时的写法 --&gt;</div><div class="line">&lt;bean id=<span class="string">"dog"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Dog"</span> /&gt;</div><div class="line">&lt;bean id=<span class="string">"p"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Person"</span>&gt;</div><div class="line">    &lt;property name=<span class="string">"id"</span> value=<span class="string">"1111"</span> /&gt;</div><div class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"华安"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"wangcai"</span> ref=<span class="string">"dog"</span> /&gt; </div><div class="line">&lt;/bean&gt;</div><div class="line">    </div><div class="line">&lt;!-- 使用构造实现自动装配时的写法 --&gt;</div><div class="line">&lt;bean id=<span class="string">"dog"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Dog"</span> /&gt;</div><div class="line">&lt;bean id=<span class="string">"p"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Person"</span> autowire=<span class="string">"constructor"</span>&gt;</div><div class="line">    &lt;property name=<span class="string">"id"</span> value=<span class="string">"1111"</span> /&gt;</div><div class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"华安"</span> /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h3><h6 id="Spring-支持的资源类型的地址前缀"><a href="#Spring-支持的资源类型的地址前缀" class="headerlink" title="Spring 支持的资源类型的地址前缀"></a>Spring 支持的资源类型的地址前缀</h6><table>
<thead>
<tr>
<th>地址前缀</th>
<th>示例</th>
<th>对应的资源类型</th>
</tr>
</thead>
<tbody>
<tr>
<td> classpath:</td>
<td>classpath:com/smart/beanfactory/beans.xml</td>
<td>从类路径中加载资源， classpath: 和 classpath:/是等价的， 都是相对于类的根路径。 资源文件可以在标准的文件系统中， 也可以在 JAR 或 ZIP 的类包中</td>
</tr>
<tr>
<td>file:</td>
<td>file:/conf/com/smart/beanfactory/beans.xml</td>
<td>使用 UrlResource 从文件系统目录中装置资源，可以采用绝对或相对路径</td>
</tr>
<tr>
<td>http://</td>
<td><a href="http://www.smart.com/resource/beans.xml" target="_blank" rel="noopener">http://www.smart.com/resource/beans.xml</a></td>
<td>使用 UrlResource 从Web 服务器中装载资源</td>
</tr>
<tr>
<td>ftp://</td>
<td><a href="http://www.smart.com/resource/beans.xml" target="_blank" rel="noopener">http://www.smart.com/resource/beans.xml</a></td>
<td>使用 UrlResource 从FTP 服务器中装载资源</td>
</tr>
<tr>
<td>没有前缀</td>
<td>com/smart/beanfactory/beans.xml</td>
<td>根据 ApplicationContext 的具体实现类采用对应类型的Resource</td>
</tr>
</tbody>
</table>
<h6 id="三种通配符的使用"><a href="#三种通配符的使用" class="headerlink" title="三种通配符的使用"></a>三种通配符的使用</h6><p>  假设io.spring.ioc.autowiring 包中有个 constructor-autowiring.xml</p>
<ul>
<li><p>（*）匹配同一级别路径的多个字符：io/*/ioc/autowiring/constructor-autowiring.xml</p>
</li>
<li><p>（**）匹配多级路径中的多个字符：io/**/constructor-autowiring.xml</p>
</li>
<li><p>（？） 仅匹配一个字符</p>
</li>
</ul>
<p>Ant风格资源路径的示例</p>
<ul>
<li><p>classpath:com/t ? st.xml： 匹配 com 类路径下的 com/test.xml、com/tast.xml 或者 com/txst.xml 文件</p>
</li>
<li><p>file:D:/conf/*.xml： 匹配文件系统 D:/conf 目录下所有以 .xml 为后缀的文件。</p>
</li>
<li><p>classpath:/com/**/test.xml： 匹配 com 类路径下（ 当前 目录及其子孙目录 ）的 test.xml 文件。</p>
</li>
<li><p>classpath:org/springframework/**/*.xml： 匹配类路径 org/springframework 下所有以 .xml  为后缀的文件。</p>
</li>
<li><p>classpath:org/**/servlet/servlet/bla.xml： 不仅匹配类路径 org/springframework/servlet/bla.xml， 也匹配 org/springframework/testing/servlet/bla.xml， 还匹配 org/servlet/bla.xml</p>
</li>
</ul>
<h4 id="BeanFactory-和-ApplicationContext"><a href="#BeanFactory-和-ApplicationContext" class="headerlink" title="BeanFactory 和 ApplicationContext"></a>BeanFactory 和 ApplicationContext</h4><ul>
<li><p>BeanFactory （Bean工厂， IoC 容器）</p>
<ol>
<li><p>BeanFactory 是Spring 框架最核心的接口， 它提供了高级 IoC 的配置机制</p>
</li>
<li><p>BeanFactory 是Spring 框架的基础设施， 面向Spring本身</p>
</li>
<li><p>类的通用工厂， 可以创建并管理各种类的对象</p>
</li>
<li><p>在初始化 BeanFactory ， 必须提供一种日志框架， 如Log4J</p>
</li>
<li><p>初始化容器时， 并未实例化 Bean， 第一次访问某个 Bean 时才实例化目标 Bean （ “ 第一次惩罚 ” ）</p>
</li>
</ol>
</li>
<li><p>ApplicationContext （ 应用上下文， Spring 容器 ）</p>
<ol>
<li><p>ApplicationContext 建立在 BeanFactory 基础之上， 提供了面向应用的功能</p>
</li>
<li><p>ApplicationContext 面向使用 Spring 框架的开发者， 几乎在所有场景都可以直接使用</p>
</li>
<li><p>主要实现类：</p>
<ul>
<li><p>ClassPathXmlApplicationContext ： 默认从类路径加载配置文件</p>
</li>
<li><p>FileSystemXmlApplicationContext ： 默认从文件系统中加载配置文件</p>
</li>
</ul>
</li>
<li><p>ApplicationContext 初始化</p>
<ul>
<li>配置文件在类路径下， 优先考虑 ClassPathXmlApplicationContext</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = </div><div class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/smart/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
<pre><code>- 配置文件在文件系统路径下， 优先考虑 FileSystemXmlApplicationContext
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = </div><div class="line">    <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"com/smart/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
<pre><code>- 指定一组配置文件， Spring 会自动将多个配置文件在内存中 “ 整合 ”  成一个配置文件
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = </div><div class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">    <span class="keyword">new</span> String[] &#123; <span class="string">"conf/beans1.xml"</span>, <span class="string">"conf/beans2.xml"</span> &#125;);</div></pre></td></tr></table></figure>
<pre><code>- 初始化应用上下文时就实例化所有单实例的 Bean 
</code></pre></li>
</ul>
<ul>
<li><p>WebApplicationContext </p>
<ol>
<li><p>专门为 Web 应用准备， 允许从相对于 Web 根目录的路径中装载配置文件完成初始化工作</p>
</li>
<li><p>从 WebApplicationContext 中可以获得 ServletContext 的引用， 整个 WebApplicationContext 将作为属性放置到ServletContext 中</p>
</li>
<li><p>WebApplicationContext 作用域 ： singleton 、 prototype、 request 、 session、 global session </p>
</li>
<li><p>Spring 的 Web 应用上下文和 Web 容器的上下文应用实现互访： WebApplicationContextUtils # getWebApplicationContext(ServletContext sc)</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebApplicationContext wac = (WebApplicationContext)servletContext.getAttribute</div><div class="line">(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)</div></pre></td></tr></table></figure>
<ol>
<li><p>WebApplicationContext  初始化， 需要 ServletContext 实例，必须在拥有 Web 容器的前提下才能完成启动工作<br> Spring 分别提供了用于启动 WebApplicationContext 的 Servlet 和 Web 容器监听器( 需要在 web.xml 中完成配置 )：</p>
<pre><code>- org.springframework.web.context.ContextLoaderServlet

- org.springframework.web.context.ContextLoaderListener
</code></pre></li>
</ol>
</li>
</ul>
<p>总结： </p>
<ol>
<li><p>发现自己还有太多东西不懂， 对 Servlet 不够熟悉导致有些内容不能理解</p>
</li>
<li><p>涉及到原理性的东西比如 Bean 生命周期以及核心工作原理的很难看懂</p>
</li>
<li><p>知识学了但是运用得太少， 只是知道有这个东西不会运用， 应该多动手， 尝试着读别人的代码并且自己写</p>
</li>
</ol>
<p>注： 以上内容来自上课笔记以及《 Spring4.x-企业应用开发实战》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;IoC ： Inversion of Control ， 控制反转， 是 Spring 容器的内核， AOP、 声明式事务等功能在此基础上开花结果&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java框架" scheme="http://www.leozzy.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://www.leozzy.com/categories/Java%E6%A1%86%E6%9E%B6/Spring/"/>
    
      <category term="Ioc" scheme="http://www.leozzy.com/categories/Java%E6%A1%86%E6%9E%B6/Spring/Ioc/"/>
    
    
      <category term="Spring" scheme="http://www.leozzy.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Github命令简记-基础</title>
    <link href="http://www.leozzy.com/2017/09/01/Github%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0-%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.leozzy.com/2017/09/01/Github命令简记-基础/</id>
    <published>2017-08-31T21:21:32.000Z</published>
    <updated>2017-10-21T04:19:54.546Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚学习github， 本文记录最基本的github命令， 网上教程一大把， 我简单将命令记录在此， 方便查找。</p>
<a id="more"></a>
<h3 id="本地环境操作"><a href="#本地环境操作" class="headerlink" title="本地环境操作"></a>本地环境操作</h3><ul>
<li><p><code>git</code> ————————————- 查看最常用的Git命令</p>
</li>
<li><p><code>git status</code>  —————————– 查看当前仓库的状态</p>
</li>
<li><p><code>git init</code>  ——————————– 初始化 git 仓库</p>
</li>
<li><p><code>git add  [ name ]</code> ——————— 将代码加入等待提交的缓存中（防止误提交）</p>
</li>
<li><p><code>git rm –-cached [ name ]</code>  ———- 从缓存中移除</p>
</li>
<li><p><code>git commit -m [ message ]</code> ——— 提交附带提交信息</p>
</li>
<li><p><code>git log</code>  ———————————- 查看commit记录</p>
</li>
<li><p><code>git branch</code> ——————————- 查看当前分支情况</p>
</li>
<li><p><code>git branch [ name ]</code> ——————- 创建新分支</p>
</li>
<li><p><code>git checkout [ name ]</code> —————- 切换分支</p>
</li>
<li><p><code>git checkout -b [ name ]</code> ———— 创建并切换分支</p>
</li>
<li><p><code>git merge [ name ]</code> ———————合并分支到主分支 </p>
</li>
<li><p><code>git branch -d [ name ]</code>—————- 删除分支</p>
</li>
<li><p><code>git branch -D [ name ]</code> ————— 强制删除分支</p>
</li>
<li><p><code>git tag</code> ————————————-查看版本记录</p>
</li>
<li><p><code>git tag [ version ]</code>———————新建版本信息</p>
</li>
<li><p><code>git checkout [ version ]</code>————–切换到对应的版本状态</p>
</li>
</ul>
<h3 id="本地与远程仓库协作"><a href="#本地与远程仓库协作" class="headerlink" title="本地与远程仓库协作"></a>本地与远程仓库协作</h3><ul>
<li><p><code>ssh -T git@github.com</code> ————————–查看SSH key 是否添加成功</p>
</li>
<li><p><code>git remote add origin [ url ]</code> —————建立本地目录与远程仓库的关联 ( 相当于给远程 url 取了别名 origin )</p>
</li>
<li><p><code>git remote remove origin</code> ———————-取消本地目录与远程仓库的关联 </p>
</li>
<li><p><code>git remote -v</code> ————————————–查看当前项目有哪些远程仓库</p>
</li>
<li><p><code>git push origin master</code> ————————–将本地代码提交到远程仓库 ( 需要先解决冲突 )</p>
</li>
<li><p><code>git push -f origin</code> ————————– 强制提交( 覆盖远程代码 )</p>
</li>
<li><p><code>git pull origin master</code> ————————- 更新远程仓库代码到本地</p>
</li>
<li><p><code>git clone [ url ]</code> ——————————– Clone 项目</p>
</li>
<li><p><code>git checkout [ version ]</code> ————————切换到对应的版本状态</p>
</li>
<li><p><code>git config --global user.name 「 username 」</code>——- 全局设置用户名 ( 去除global 就是为某一个项目进行设置 )</p>
</li>
<li><p><code>git config --global user.email 「 email 」</code>———-全局设置邮箱 ( 去除global 就是为某一个项目进行设置 )</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚学习github， 本文记录最基本的github命令， 网上教程一大把， 我简单将命令记录在此， 方便查找。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="github" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/github/"/>
    
    
      <category term="github" scheme="http://www.leozzy.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Leo&#39;s start</title>
    <link href="http://www.leozzy.com/2017/08/31/Leo-s-start/"/>
    <id>http://www.leozzy.com/2017/08/31/Leo-s-start/</id>
    <published>2017-08-31T14:28:02.000Z</published>
    <updated>2017-10-21T04:20:29.751Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这是一篇记录-Leo-站点成立的博客"><a href="#这是一篇记录-Leo-站点成立的博客" class="headerlink" title="这是一篇记录 Leo 站点成立的博客"></a>这是一篇记录 Leo 站点成立的博客</h5><a id="more"></a>
<p>也许是受「帅张」和圈友的影响，终于把博客当一回事了，花了两天时间把博客草草地搭建起来， 还有许多地方不完善。 尽管之前也有想过学着写博客， 最终还是停留在口头上， 今天作为新的开始。「可能吧」里面的一篇文章：<a href="http://mp.weixin.qq.com/s/ZACwzaP9lhjluHvA-o-z2A" target="_blank" rel="noopener">别做口头上的学习者</a>。</p>
<p>简单叙述一下我搭建博客的流程：</p>
<ol>
<li><p>准备好 Google ( 这当然是学习必不可少的神器 )  </p>
</li>
<li><p>根据教程使用 Github + Hexo 方式搭建静态博客</p>
</li>
<li><p>修改博客主题以及对页面的一些配置</p>
</li>
<li><p>阿里云购买域名并连接 Github 博客站点</p>
</li>
<li><p>学习 Github + Git， 掌握最基本的命令</p>
</li>
<li><p>学习 Markdown 基本语法</p>
</li>
<li><p>开启博客之旅</p>
</li>
</ol>
<p>目前的技术还真的不行， 所以只能从一些基础开始分享， 自己也从小白开始成长， 希望有一天成为「大神」。坚持当然是最重要的一点了， 很多人是按时间来约束自己， 一个月或者一周或者每天一篇博客， 但是对于我这种小白， 我的选择是学到了东西就发一篇， 也当是对知识的整理， 除了分享给他人还有重要的一点就是把自己积累的知识记录在这里。 </p>
<p>技术源于分享， 分享阮一峰老师的一本书与大家共勉：<a href="http://survivor.ruanyifeng.com/" target="_blank" rel="noopener">未来世界的幸存者</a></p>
<p>附上帅照一张<br><img src="/2017/08/31/Leo-s-start/leo.jpg" title="This is Leo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;这是一篇记录-Leo-站点成立的博客&quot;&gt;&lt;a href=&quot;#这是一篇记录-Leo-站点成立的博客&quot; class=&quot;headerlink&quot; title=&quot;这是一篇记录 Leo 站点成立的博客&quot;&gt;&lt;/a&gt;这是一篇记录 Leo 站点成立的博客&lt;/h5&gt;
    
    </summary>
    
      <category term="时光" scheme="http://www.leozzy.com/categories/%E6%97%B6%E5%85%89/"/>
    
    
      <category term="时光" scheme="http://www.leozzy.com/tags/%E6%97%B6%E5%85%89/"/>
    
  </entry>
  
</feed>
