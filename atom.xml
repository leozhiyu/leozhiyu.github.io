<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.leozzy.com/"/>
  <updated>2017-09-13T08:03:49.478Z</updated>
  <id>http://www.leozzy.com/</id>
  
  <author>
    <name>Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识JavaScript原型</title>
    <link href="http://www.leozzy.com/2017/09/13/%E5%88%9D%E8%AF%86JavaScript%E5%8E%9F%E5%9E%8B/"/>
    <id>http://www.leozzy.com/2017/09/13/初识JavaScript原型/</id>
    <published>2017-09-13T15:54:31.000Z</published>
    <updated>2017-09-13T08:03:49.478Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始学习 JavaScript ， 感觉很多细节， 很多需要注意的地方， 把自己觉得细节的地方整理了一篇文章放在后面。</p>
<p>这里是解决碰到的第一个难点， 如何理解 JavaScript 原型。 在网上看到一篇文章， 看完之后豁然开朗， 对原型大概理解了。 为什么说大概呢， 毕竟自己还没运用起来， 只有深入理解并且会用了才是理解到位。</p>
<p>感谢作者的分享， 链接： <a href="http://www.cnblogs.com/wilber2013/p/4924309.html" target="_blank" rel="external">彻底理解 JavaScript 原型</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始学习 JavaScript ， 感觉很多细节， 很多需要注意的地方， 把自己觉得细节的地方整理了一篇文章放在后面。&lt;/p&gt;
&lt;p&gt;这里是解决碰到的第一个难点， 如何理解 JavaScript 原型。 在网上看到一篇文章， 看完之后豁然开朗， 对原型大概理解了。 为什么
    
    </summary>
    
      <category term="javascript" scheme="http://www.leozzy.com/categories/javascript/"/>
    
    
      <category term="javascript 原型" scheme="http://www.leozzy.com/tags/javascript-%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>javascript基础-注意点汇总</title>
    <link href="http://www.leozzy.com/2017/09/11/javascript%E5%9F%BA%E7%A1%80-%E6%B3%A8%E6%84%8F%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://www.leozzy.com/2017/09/11/javascript基础-注意点汇总/</id>
    <published>2017-09-11T11:25:04.000Z</published>
    <updated>2017-09-13T07:19:41.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><ol>
<li><p>type属性： 默认的 type 就是javascript， 所以不必显式指定 type 为javascript</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script  type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">...</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>javascript 不强制在每个语句结尾加 “；” ，javascript 会自动加分号， 但是在某些情况下会改变程序的语义， 所以最好主动加 “；”</p>
</li>
<li><p>两个相等运算符比较</p>
<ul>
<li><p>‘==’ 相等（  值相等 ）， 它会自动转换数据类型再比较，很多时候会得到非常诡异的结果</p>
</li>
<li><p>‘===’ 严格相等（ 数据类型和值都相等 ） ,  它不会自动转换数据类型， 如果数据类型不一致，返回false， 如果一致， 再比较</p>
</li>
</ul>
</li>
<li><p>NaN 与所有其他值都不相等， 包括它自己：</p>
<p> <code>NaN === NaN; // false</code></p>
<p> 唯一能判断NaN的方法是通过isNaN()函数：</p>
<p> <code>isNaN(NaN); // true</code></p>
</li>
<li><p>浮点数比较</p>
<p> 浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p>
<p> <code>Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</code></p>
</li>
<li><p>null 和 undefined</p>
<p> 大多数情况下， 我们都应该用 <code>null</code>， <code>undefined</code> 仅仅在判断函数参数是否传递的情况下有用</p>
</li>
<li><p>出于代码的可读性考虑， 创建数组建议用 <code>[]</code>， 而不使用 <code>new Array()</code></p>
</li>
<li><p>如果一个变量没有通过 <code>var</code> 申明就被使用， 那么该变量就自动被申明为全局变量。 使用 <code>var</code> 申明的变量则不是全局变量， 它的范围被限制在该变量被申明的函数体内</p>
</li>
<li><p>启用 strict 模式（ 强制通过 <code>var</code> 声明变量）： 在 javascript 代码第一行写上<br><code>&#39;use strict&#39;;</code></p>
</li>
<li><p>多行字符串用反引号表示  ` … ` </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">`这是一个</span></div><div class="line"><span class="string">多行</span></div><div class="line"><span class="string">字符串`</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>模版字符串<br><code>alert(</code>你好, ${name}, 你今年${age}岁了!<code>);</code></p>
</li>
<li><p>要获取字符串某个指定位置的字符， 使用类似 <code>Array</code> 的下标操作，    索引号从 0 开始。字符串是不可变的， 如果对字符串的某个索引赋值， 不会有任何错误， 但是， 也没有任何效果</p>
</li>
<li><p>直接给 <code>Array</code> 的 <code>length</code> 赋一个新的值会导致 <code>Array</code> 大小的变化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.length; <span class="comment">// 3</span></div><div class="line">arr.length = <span class="number">6</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果通过索引赋值时， 索引超过了范围， 同样会引起 <code>Array</code> 大小的变化， 但是不会有任何错误， 在编写代码时， 不建议直接修改 <code>Array</code> 的大小， 访问索引时要确保索引不会越界</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr[<span class="number">5</span>] = <span class="string">'x'</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></div></pre></td></tr></table></figure>
</li>
<li><p>数字30和字符串’30’是不同的元素</p>
</li>
<li><p><code>slice()</code> 的起止参数包括开始索引， 不包括结束索引。</p>
</li>
<li><p>如果不给 <code>slice()</code> 传递任何参数， 它就会从头到尾截取所有元素。 利用这一点， 我们可以很容易地复制一个 <code>Array</code></p>
</li>
<li><p>空数组继续 <code>pop</code> 不会报错，而是返回 <code>undefined</code></p>
</li>
<li><p><code>concat()</code> 方法并没有修改当前 <code>Array</code>， 而是返回了一个新的 <code>Array</code>，<code>concat()</code> 方法可以接收任意个元素和 <code>Array</code>， 并且自动把<code>Array</code>拆开， 然后全部添加到新的<code>Array</code>里</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// ['A', 'B', 'C', 1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>20.<code>javascript</code> 对象属性名必须是一个有效的变量名。 如果属性名包含特殊字符， 就必须用 <code>&#39;&#39;</code> 括起来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaohong = &#123;</div><div class="line">    name: <span class="string">'小红'</span>,</div><div class="line">    <span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>xiaohong</code> 的属性名 <code>middle-school</code> 不是一个有效的变量， 就需要用 <code>&#39;&#39;</code> 括起来。 访问这个属性也无法使用.操作符， 必须用 <code>[&#39;xxx&#39;]</code> 来访问：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xiaohong[<span class="string">'middle-school'</span>]; <span class="comment">// 'No.1 Middle School'</span></div><div class="line">xiaohong[<span class="string">'name'</span>]; <span class="comment">// '小红'</span></div><div class="line">xiaohong.name; <span class="comment">// '小红'</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>如果我们要检测 <code>xiaoming</code> 是否拥有某一属性， 可以用in操作符,  不过要小心， 如果 <code>in</code> 判断一个属性存在， 这个属性不一定是<code>xiaoming</code> 的， 它可能是 <code>xiaoming</code> 继承得到的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'name'</span> <span class="keyword">in</span> xiaoming; <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>要判断一个属性是否是 <code>xiaoming</code> 自身拥有的，而不是继承得到的，可以用 <code>hasOwnProperty()</code> 方法</p>
</li>
<li><p>JavaScript把 <code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code> 和空字符串  <code>&#39;&#39;</code> 视为 <code>false</code>，其他值一概视为 <code>true</code></p>
</li>
<li><p>由于 <code>Array</code> 也是对象， 而它的每个元素的索引被视为对象的属性， 因此， <code>for ... in</code> 循环可以直接循环出 <code>Array</code> 的索引</p>
</li>
<li><p><code>for ... in</code> 循环由于历史遗留问题， 它遍历的实际上是对象的属性名称， <code>for ... of</code> 循环则完全修复了这些问题， 它只循环集合本身的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.name = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</div><div class="line">    alert(x); <span class="comment">// '0', '1', '2', 'name'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.name = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</div><div class="line">    alert(x); <span class="comment">// 'A', 'B', 'C'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><p>函数如果没有 <code>return</code> 语句， 函数执行完毕后也会返回结果， 只是结果为 <code>undefined</code></p>
</li>
<li><p>由于 <code>JavaScript</code> 允许传入任意个参数而不影响调用， 因此传入的参数比定义的参数多也没有问题， 虽然函数内部并不需要这些参数， 传入的参数比定义的少也没有问题</p>
</li>
<li><p>关键字 <code>arguments</code> 类似 <code>Array</code> 但它不是一个 <code>Array</code></p>
</li>
<li><p>不在任何函数内定义的变量就具有全局作用域。 实际上， <code>JavaScript</code> 默认有一个全局对象 <code>window</code>。 以变量方式 <code>var foo = function () {}</code> 定义的函数实际上也是一个全局变量。</p>
</li>
<li><p>用 <code>var that = this;</code> ， 你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。 对于普通函数调用， 通常把 <code>this</code> 绑定为 <code>null</code>。</p>
</li>
<li><p><code>apply()</code> 与 <code>call()</code>的唯一区别</p>
<ul>
<li><p><code>apply()</code> 把参数打包成 <code>Array</code> 再传入；</p>
</li>
<li><p><code>call()</code> 把参数按顺序传入。</p>
</li>
</ul>
</li>
<li><p>所有实例的原型引用的是函数的prototype属性</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;type属性： 默认的 type 就是javascript， 所以不必显式指定 type 为javascr
    
    </summary>
    
      <category term="javascript" scheme="http://www.leozzy.com/categories/javascript/"/>
    
    
      <category term="javascript 基础知识" scheme="http://www.leozzy.com/tags/javascript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 网络结构</title>
    <link href="http://www.leozzy.com/2017/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/"/>
    <id>http://www.leozzy.com/2017/09/11/计算机网络-网络结构/</id>
    <published>2017-09-11T09:44:57.000Z</published>
    <updated>2017-09-11T03:12:42.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h2><ul>
<li><p>计算机网络</p>
<ul>
<li><p>结点： 计算机、 集线器、 交换机或路由器等</p>
</li>
<li><p>链路： 连接结点</p>
</li>
</ul>
</li>
<li><p>互联网的组成</p>
<ul>
<li><p>边缘部分： 由所有连接在互联网上的主机（ 端系统 ）组成， 用户直接使用。以下是端系统间的通信方式</p>
<ol>
<li><p>客户-服务器方式</p>
</li>
<li><p>对等连接方式（ P2P ）</p>
</li>
</ol>
</li>
<li><p>核心部分： 由大量网络和连接网络的路由器组成， 为边缘部分提供连通性和交换</p>
<ul>
<li>路由器： 实现分组交换的关键构件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><ul>
<li><p>电路交换： 建立连接（ 占用通信资源 ） -&gt; 通话（ 一直占用通信资源 ） -&gt; 释放连接（ 归还通信资源 ）</p>
<ul>
<li>特点：在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</li>
</ul>
</li>
</ul>
<ul>
<li><p>分组交换： 采用存储转发技术。 路由器收到一个分组， 先暂时存储， 检查其首部， 查找转发表， 按照首部中的目的地址， 找到合适的接口转发出去， 把分组交给下一个路由器。</p>
<ul>
<li><p>构成： 报文 = n 个分组， 分组 = 首部 + 数据段</p>
</li>
<li><p>特点</p>
<ol>
<li><p>高效： 在分组传输的过程中动态分配传输宽带， 对通信链路是逐段占用</p>
</li>
<li><p>灵活： 为每一个分组独立地选择最合适的转发路由</p>
</li>
<li><p>迅速： 以分组作为传送单位， 可以先不建立连接就能向其他主机发送分组</p>
</li>
<li><p>可靠： 保证可靠性的网络协议： 分布式多路由的分组交换网， 使网络有很好的生存性</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>报文交换： 20 世纪 40 年代用于电报通信， 基于存储转发原理</p>
</li>
</ul>
<h5 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h5><ul>
<li><p>电路交换： 整个报文的比特流连续地从源点直达重点， 好像在一个管道中传送</p>
</li>
<li><p>报文交换： 整个报文先传送到相邻结点， 全部存储下来后查找转发表， 转发到下一个结点</p>
</li>
<li><p>分组交换： 单个分组（ 这只是整个报文的一部分 ）传送到相邻结点， 存储下来后查找转发表， 转发到下一个结点</p>
</li>
</ul>
<h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><ul>
<li><p>按照网络的作用范围分类</p>
<ol>
<li><p>广域网 WAN： 几十到几千公里</p>
</li>
<li><p>城域网 MAN： 5- 50 KM</p>
</li>
<li><p>局域网 LAN： 1 KM</p>
</li>
<li><p>个人区域网 PAN： 10M</p>
</li>
</ol>
</li>
<li><p>按照网络的使用者分类</p>
<ol>
<li><p>公用网： 电信公司（ 国有或私有 ）出资建造的大型网络</p>
</li>
<li><p>专用网： 某个部门为满足本单位的特殊业务工作的需要而建造的网络</p>
</li>
</ol>
</li>
</ul>
<h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><ul>
<li><p>计算机网络的性能指标</p>
<ol>
<li><p>速率（ 数据率、 比特率 ），单位： bit/s</p>
</li>
<li><p>带宽</p>
<ul>
<li><p>某个信号具有的带宽频度，单位： Hz</p>
</li>
<li><p>单位时间内某信道所能通过的 “最高数据率”， 单位：bit/s</p>
</li>
</ul>
</li>
<li><p>吞吐量： 单位时间内通过某个网络的实际的数据量</p>
</li>
<li><p>时延（ 延迟、 迟延 ）： 数据从网络的一段传送到另一端所需的时间，总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p>
<ul>
<li><p>发送时延： 主机或路由器发送数据帧所需要的时间</p>
</li>
<li><p>传播时延： 电磁波在信道中传播一定距离需要花费的时间</p>
</li>
<li><p>处理时延： 主机或路由器在收到分组时要花费一定的时间进行处理</p>
</li>
<li><p>排队时延： 分组在经过网络传输时， 要经过许多路由器， 分组在进入路由器后要先在输入队列中排队等待处理</p>
</li>
</ul>
</li>
<li><p>时延带宽积： 传播时延 * 带宽</p>
</li>
<li><p>往返时间RTT： 双向交互一次所需的时间</p>
</li>
<li><p>利用率： 信道利用率和网络利用率</p>
</li>
</ol>
</li>
<li><p>计算机网络的非性能特征</p>
<ol>
<li>费用</li>
<li>质量</li>
<li>标准化</li>
<li>可靠性</li>
<li>可扩展性和可升级性</li>
<li>易于管理和维护</li>
</ol>
</li>
</ul>
<h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><ul>
<li><p>OSI 的七层协议： 1. 物理层 2.数据链路层 3. 网络层 4.运输层 5.会话层 6.表示层 7.应用层</p>
</li>
<li><p>TCP/IP 的四层协议： 1.网络接口层 2.网际层IP 3.运输层（ TCP 或 UDP） 4.应用层（ 各种应用层协议如TELNET, FTP, SMTP 等）</p>
</li>
<li><p>五层协议： </p>
<ol>
<li><p>物理层 ： 考虑用多大的电压代表 “1” 或 “0” ，以及接收方如何识别发送方所发送的比特。还要确定连接电缆的插头应当有多少根引脚以及各引脚应如何连接</p>
</li>
<li><p>数据链路层 ： 两个相邻结点之间传送数据时， 数据链路层将网络层交下来的 IP 数据报组装成帧， 在两个相邻结点间的链路上传送帧</p>
</li>
<li><p>网络层： 为分组交换网上的不同主机提供通信服务</p>
</li>
<li><p>运输层 ： 负责向两台主机进程之间的通信提供通用的网络传输服务</p>
</li>
<li><p>应用层： 通过应用进程间的交互来完成特定网络应用</p>
</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本组成&quot;&gt;&lt;a href=&quot;#基本组成&quot; class=&quot;headerlink&quot; title=&quot;基本组成&quot;&gt;&lt;/a&gt;基本组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;计算机网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;结点： 计算机、 集线器、 交换机或路由器等&lt;/p&gt;
&lt;/li
    
    </summary>
    
      <category term="计算机网络" scheme="http://www.leozzy.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://www.leozzy.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>2017版 Hexo Next主题侧边栏 Sidebar 配置自动展开教程</title>
    <link href="http://www.leozzy.com/2017/09/08/hexo-sidebar-auto/"/>
    <id>http://www.leozzy.com/2017/09/08/hexo-sidebar-auto/</id>
    <published>2017-09-08T11:29:00.000Z</published>
    <updated>2017-09-08T03:52:16.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从搭建博客就想自动展开侧边栏， 结果网上找了很多方法都不生效， 今天找到一篇博客试着重新设置了下， 仍然无效， 但是找到了设置的思路， 于是自己找相关的文件进行设置， 在此分享。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于主题版本不同， 以下方法只是对应当前版本， 但是思路是一样的， 只是文件的路径和文件名称可能不同</p>
<h2 id="Step-1-修改主题配置文件-display-always"><a href="#Step-1-修改主题配置文件-display-always" class="headerlink" title="Step 1 修改主题配置文件  display: always"></a>Step 1 修改主题配置文件  display: always</h2><p>路径：/hexo/themes/next/_config.yml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sidebar: </div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  position: left</div><div class="line">  #position: right</div><div class="line"></div><div class="line">  #display: post</div><div class="line">  display: always </div><div class="line">  #display: hide</div><div class="line">  #display: remove</div></pre></td></tr></table></figure>
<h2 id="Step-2-修改-motion-js-文件"><a href="#Step-2-修改-motion-js-文件" class="headerlink" title="Step 2 修改 motion.js 文件"></a>Step 2 修改 motion.js 文件</h2><p>路径：/hexo/themes/next/source/js/src/motion.js</p>
<p>在文件末尾</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sidebar: <span class="function"><span class="keyword">function</span> (<span class="params">integrator</span>) </span>&#123;</div><div class="line">  <span class="comment">//if (CONFIG.sidebar.display === 'always') &#123;  //注释</span></div><div class="line">    NexT.utils.displaySidebar();</div><div class="line">  <span class="comment">//&#125; //注释</span></div><div class="line">  integrator.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Step-3-修改post-details-js"><a href="#Step-3-修改post-details-js" class="headerlink" title="Step 3 修改post-details.js"></a>Step 3 修改post-details.js</h2><p>路径： /hexo/themes/next/source/js/src/post-details.js</p>
<p>在文件末尾</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*var $tocContent = $('.post-toc-content');</span></div><div class="line"><span class="comment">  var isSidebarCouldDisplay = CONFIG.sidebar.display === 'post' ||</span></div><div class="line"><span class="comment">      CONFIG.sidebar.display === 'always';</span></div><div class="line"><span class="comment">  var hasTOC = $tocContent.length &gt; 0 &amp;&amp; $tocContent.html().trim().length &gt; 0;</span></div><div class="line"><span class="comment">  if (isSidebarCouldDisplay &amp;&amp; hasTOC) &#123;</span></div><div class="line"><span class="comment">    CONFIG.motion ?</span></div><div class="line"><span class="comment">      (NexT.motion.middleWares.sidebar = function () &#123;</span></div><div class="line"><span class="comment">          NexT.utils.displaySidebar();</span></div><div class="line"><span class="comment">      &#125;) : NexT.utils.displaySidebar();</span></div><div class="line"><span class="comment">  &#125;*/</span></div></pre></td></tr></table></figure>
<p>将以上代码段落全部注释， 只用最后一句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NexT.utils.displaySidebar();</div></pre></td></tr></table></figure>
<h5 id="这是我使用的主题版本的设置方法，-希望对需要的人有帮助"><a href="#这是我使用的主题版本的设置方法，-希望对需要的人有帮助" class="headerlink" title="这是我使用的主题版本的设置方法， 希望对需要的人有帮助"></a>这是我使用的主题版本的设置方法， 希望对需要的人有帮助</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;从搭建博客就想自动展开侧边栏， 结果网上找了很多方法都不生效， 今天找到一篇博客试着重新设置了下， 仍然无效， 但是找到了设置的思路， 于是
    
    </summary>
    
      <category term="工具" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hexo" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.leozzy.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IoC 容器</title>
    <link href="http://www.leozzy.com/2017/09/06/Spring-IoC/"/>
    <id>http://www.leozzy.com/2017/09/06/Spring-IoC/</id>
    <published>2017-09-06T09:15:29.000Z</published>
    <updated>2017-09-08T02:25:09.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>IoC ： Inversion of Control ， 控制反转， 是 Spring 容器的内核， AOP、 声明式事务等功能在此基础上开花结果</p>
<ul>
<li>某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定，由Spring容器借由Bean配置来进行控制</li>
</ul>
</li>
</ul>
<ul>
<li><p>DI  ：  Dependency Injection ， 依赖注入， 此概念用来代替IoC</p>
<ul>
<li>让调用类对某一接口实现类的依赖关系由第三方（ 容器或协作类 ）注入，以移除调用类对某一接口实现类的依赖</li>
</ul>
</li>
</ul>
<h3 id="注入方式："><a href="#注入方式：" class="headerlink" title="注入方式："></a>注入方式：</h3><ul>
<li><p>构造函数注入（ constructor-base ）</p>
<p>   通过调用类的构造函数， 将接口实现类通过构造函数变量传入  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt;</div><div class="line"></div><div class="line">&lt;!-- constructor --&gt;</div><div class="line">    &lt;bean id=<span class="string">"customer"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"io.spring.ioc.di.Customer"</span> &gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"id"</span> value=<span class="string">"1003"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">"Leo"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"gender"</span> value=<span class="string">"男"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"birthdate"</span> ref=<span class="string">"date"</span> /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Integer id, String name, <span class="keyword">char</span> gender, Date birthdate)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.id = id;   </div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.gender = gender;</div><div class="line">    <span class="keyword">this</span>.birthdate = birthdate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>属性注入（ setter-base ）</p>
<p>  属性注入可以有选择地通过Setter方法完成调用类所需依赖的注入（ 方便灵活 ）</p>
<h4 id="Spring-Framework-3-0-之前"><a href="#Spring-Framework-3-0-之前" class="headerlink" title="Spring Framework 3.0 之前"></a>Spring Framework 3.0 之前</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    &lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;!-- setter --&gt;</div><div class="line">    &lt;bean id=<span class="string">"customer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"io.spring.ioc.di.Customer"</span> &gt;</div><div class="line">        &lt;property name=<span class="string">"id"</span> value=<span class="string">"1002"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"name"</span> value=<span class="string">"Leo"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"gender"</span> value=<span class="string">"男"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"birthdate"</span> ref=<span class="string">"date"</span> /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    ```                                         </div><div class="line">#### Spring Framework 3.0 开始支持 p 命名空间 :</div><div class="line"></div><div class="line">   ```java</div><div class="line">    &lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt;</div><div class="line">    </div><div class="line">    &lt;!-- setter --&gt;</div><div class="line">    &lt;bean id=<span class="string">"customer"</span> </div><div class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"io.spring.ioc.di.Customer"</span> </div><div class="line">        p:id=<span class="string">"1002"</span> </div><div class="line">        p:name=<span class="string">"Leo"</span></div><div class="line">        p:gender=<span class="string">"男"</span></div><div class="line">        p:birthdate-ref=<span class="string">"date"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>接口注入（ interface-base ）</p>
<p>  将调用类所有依赖注入的方法抽取到一个接口中， 调用类通过实现该接口提供相应的注入方法（ 额外声明接口， 增加类的数目， 效果和属性并无本质区别， 不提倡 ）</p>
</li>
</ul>
<h3 id="自动装配（-autowiring-）"><a href="#自动装配（-autowiring-）" class="headerlink" title="自动装配（ autowiring ）"></a>自动装配（ autowiring ）</h3><h6 id="将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中"><a href="#将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中" class="headerlink" title="将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中"></a>将某个Bean实例中所应用的其它的Bean自动注入到当前Bean实例中</h6><ol>
<li><p>no ： 默认值， 不启用自动装配，需要显示引用相应的Bean</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>/&gt;</div><div class="line"></div><div class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Student"</span>&gt;</div><div class="line">&lt;property name=<span class="string">"birthdate"</span> ref=<span class="string">"date"</span> /&gt; &lt;!-- 显示引用Bean --&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>byName ： 根据属性名称和被引用的Bean的名称来实现自动注入(setter)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"birthdate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;!-- 假设Student类内部有一个birthdate属性(有getter和setter) --&gt;</div><div class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Student"</span> autowire=<span class="string">"byName"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>byType： 根据属性类型和被引用的Bean的类型来实现自动注入(setter)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"d"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;!-- 假设Student类内部有一个Date类型的属性(有getter和setter) --&gt;</div><div class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Student"</span> autowire=<span class="string">"byType"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>constructor： 根据构造方法的参数类型和被引用的Bean的类型来实现自动注入(constructor)</p>
<ul>
<li><p>当存在多个同种类型的Bean与构造方法中的参数类型相同时</p>
<p>   a-&gt;  如果某个Bean的名称跟构造方法的参数的名称一致， 则根据名称自动装配</p>
<p>   b-&gt;  如果所有Bean的名称跟构造方法的参数的名称都不相同， 则不装配，抛出空指针异常， 不抛出NoUniqueBeanDefinitionException异常</p>
</li>
<li><p>当且仅当与构造方法中的参数类型相同的Bean只有一个时， 此时根据类型自动装配</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 不使用构造实现自动装配时的写法 --&gt;</div><div class="line">&lt;bean id=<span class="string">"dog"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Dog"</span> /&gt;</div><div class="line">&lt;bean id=<span class="string">"p"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Person"</span>&gt;</div><div class="line">    &lt;property name=<span class="string">"id"</span> value=<span class="string">"1111"</span> /&gt;</div><div class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"华安"</span> /&gt;</div><div class="line">    &lt;constructor-arg name=<span class="string">"wangcai"</span> ref=<span class="string">"dog"</span> /&gt; </div><div class="line">&lt;/bean&gt;</div><div class="line">    </div><div class="line">&lt;!-- 使用构造实现自动装配时的写法 --&gt;</div><div class="line">&lt;bean id=<span class="string">"dog"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Dog"</span> /&gt;</div><div class="line">&lt;bean id=<span class="string">"p"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"Person"</span> autowire=<span class="string">"constructor"</span>&gt;</div><div class="line">    &lt;property name=<span class="string">"id"</span> value=<span class="string">"1111"</span> /&gt;</div><div class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"华安"</span> /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h3><h6 id="Spring-支持的资源类型的地址前缀"><a href="#Spring-支持的资源类型的地址前缀" class="headerlink" title="Spring 支持的资源类型的地址前缀"></a>Spring 支持的资源类型的地址前缀</h6><table>
<thead>
<tr>
<th>地址前缀</th>
<th>示例</th>
<th>对应的资源类型</th>
</tr>
</thead>
<tbody>
<tr>
<td> classpath:</td>
<td>classpath:com/smart/beanfactory/beans.xml</td>
<td>从类路径中加载资源， classpath: 和 classpath:/是等价的， 都是相对于类的根路径。 资源文件可以在标准的文件系统中， 也可以在 JAR 或 ZIP 的类包中</td>
</tr>
<tr>
<td>file:</td>
<td>file:/conf/com/smart/beanfactory/beans.xml</td>
<td>使用 UrlResource 从文件系统目录中装置资源，可以采用绝对或相对路径</td>
</tr>
<tr>
<td>http://</td>
<td><a href="http://www.smart.com/resource/beans.xml" target="_blank" rel="external">http://www.smart.com/resource/beans.xml</a></td>
<td>使用 UrlResource 从Web 服务器中装载资源</td>
</tr>
<tr>
<td>ftp://</td>
<td><a href="http://www.smart.com/resource/beans.xml" target="_blank" rel="external">http://www.smart.com/resource/beans.xml</a></td>
<td>使用 UrlResource 从FTP 服务器中装载资源</td>
</tr>
<tr>
<td>没有前缀</td>
<td>com/smart/beanfactory/beans.xml</td>
<td>根据 ApplicationContext 的具体实现类采用对应类型的Resource</td>
</tr>
</tbody>
</table>
<h6 id="三种通配符的使用"><a href="#三种通配符的使用" class="headerlink" title="三种通配符的使用"></a>三种通配符的使用</h6><p>  假设io.spring.ioc.autowiring 包中有个 constructor-autowiring.xml</p>
<ul>
<li><p>（*）匹配同一级别路径的多个字符：io/*/ioc/autowiring/constructor-autowiring.xml</p>
</li>
<li><p>（**）匹配多级路径中的多个字符：io/**/constructor-autowiring.xml</p>
</li>
<li><p>（？） 仅匹配一个字符</p>
</li>
</ul>
<p>Ant风格资源路径的示例</p>
<ul>
<li><p>classpath:com/t ? st.xml： 匹配 com 类路径下的 com/test.xml、com/tast.xml 或者 com/txst.xml 文件</p>
</li>
<li><p>file:D:/conf/*.xml： 匹配文件系统 D:/conf 目录下所有以 .xml 为后缀的文件。</p>
</li>
<li><p>classpath:/com/**/test.xml： 匹配 com 类路径下（ 当前 目录及其子孙目录 ）的 test.xml 文件。</p>
</li>
<li><p>classpath:org/springframework/**/*.xml： 匹配类路径 org/springframework 下所有以 .xml  为后缀的文件。</p>
</li>
<li><p>classpath:org/**/servlet/servlet/bla.xml： 不仅匹配类路径 org/springframework/servlet/bla.xml， 也匹配 org/springframework/testing/servlet/bla.xml， 还匹配 org/servlet/bla.xml</p>
</li>
</ul>
<h4 id="BeanFactory-和-ApplicationContext"><a href="#BeanFactory-和-ApplicationContext" class="headerlink" title="BeanFactory 和 ApplicationContext"></a>BeanFactory 和 ApplicationContext</h4><ul>
<li><p>BeanFactory （Bean工厂， IoC 容器）</p>
<ol>
<li><p>BeanFactory 是Spring 框架最核心的接口， 它提供了高级 IoC 的配置机制</p>
</li>
<li><p>BeanFactory 是Spring 框架的基础设施， 面向Spring本身</p>
</li>
<li><p>类的通用工厂， 可以创建并管理各种类的对象</p>
</li>
<li><p>在初始化 BeanFactory ， 必须提供一种日志框架， 如Log4J</p>
</li>
<li><p>初始化容器时， 并未实例化 Bean， 第一次访问某个 Bean 时才实例化目标 Bean （ “ 第一次惩罚 ” ）</p>
</li>
</ol>
</li>
<li><p>ApplicationContext （ 应用上下文， Spring 容器 ）</p>
<ol>
<li><p>ApplicationContext 建立在 BeanFactory 基础之上， 提供了面向应用的功能</p>
</li>
<li><p>ApplicationContext 面向使用 Spring 框架的开发者， 几乎在所有场景都可以直接使用</p>
</li>
<li><p>主要实现类：</p>
<ul>
<li><p>ClassPathXmlApplicationContext ： 默认从类路径加载配置文件</p>
</li>
<li><p>FileSystemXmlApplicationContext ： 默认从文件系统中加载配置文件</p>
</li>
</ul>
</li>
<li><p>ApplicationContext 初始化</p>
<ul>
<li>配置文件在类路径下， 优先考虑 ClassPathXmlApplicationContext</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = </div><div class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/smart/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
<pre><code>- 配置文件在文件系统路径下， 优先考虑 FileSystemXmlApplicationContext
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = </div><div class="line">    <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"com/smart/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
<pre><code>- 指定一组配置文件， Spring 会自动将多个配置文件在内存中 “ 整合 ”  成一个配置文件
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = </div><div class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">    <span class="keyword">new</span> String[] &#123; <span class="string">"conf/beans1.xml"</span>, <span class="string">"conf/beans2.xml"</span> &#125;);</div></pre></td></tr></table></figure>
<pre><code>- 初始化应用上下文时就实例化所有单实例的 Bean 
</code></pre></li>
</ul>
<ul>
<li><p>WebApplicationContext </p>
<ol>
<li><p>专门为 Web 应用准备， 允许从相对于 Web 根目录的路径中装载配置文件完成初始化工作</p>
</li>
<li><p>从 WebApplicationContext 中可以获得 ServletContext 的引用， 整个 WebApplicationContext 将作为属性放置到ServletContext 中</p>
</li>
<li><p>WebApplicationContext 作用域 ： singleton 、 prototype、 request 、 session、 global session </p>
</li>
<li><p>Spring 的 Web 应用上下文和 Web 容器的上下文应用实现互访： WebApplicationContextUtils # getWebApplicationContext(ServletContext sc)</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebApplicationContext wac = (WebApplicationContext)servletContext.getAttribute</div><div class="line">(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)</div></pre></td></tr></table></figure>
<ol>
<li><p>WebApplicationContext  初始化， 需要 ServletContext 实例，必须在拥有 Web 容器的前提下才能完成启动工作<br> Spring 分别提供了用于启动 WebApplicationContext 的 Servlet 和 Web 容器监听器( 需要在 web.xml 中完成配置 )：</p>
<pre><code>- org.springframework.web.context.ContextLoaderServlet

- org.springframework.web.context.ContextLoaderListener
</code></pre></li>
</ol>
</li>
</ul>
<p>总结： </p>
<ol>
<li><p>发现自己还有太多东西不懂， 对 Servlet 不够熟悉导致有些内容不能理解</p>
</li>
<li><p>涉及到原理性的东西比如 Bean 生命周期以及核心工作原理的很难看懂</p>
</li>
<li><p>知识学了但是运用得太少， 只是知道有这个东西不会运用， 应该多动手， 尝试着读别人的代码并且自己写</p>
</li>
</ol>
<p>注： 以上内容来自上课笔记以及《 Spring4.x-企业应用开发实战》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IoC ： Inversion of Control ， 控制反转， 是 Spring 容器的内核， AOP、 声明式事务
    
    </summary>
    
      <category term="Java框架" scheme="http://www.leozzy.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://www.leozzy.com/categories/Java%E6%A1%86%E6%9E%B6/Spring/"/>
    
      <category term="Ioc" scheme="http://www.leozzy.com/categories/Java%E6%A1%86%E6%9E%B6/Spring/Ioc/"/>
    
    
      <category term="Spring" scheme="http://www.leozzy.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Github命令简记-基础</title>
    <link href="http://www.leozzy.com/2017/09/01/Github%E5%91%BD%E4%BB%A4%E7%AE%80%E8%AE%B0-%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.leozzy.com/2017/09/01/Github命令简记-基础/</id>
    <published>2017-08-31T21:21:32.000Z</published>
    <updated>2017-09-01T02:54:35.339Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚学习github， 本文记录最基本的github命令， 网上教程一大把， 我简单将命令记录在此， 方便查找。</p>
<h3 id="本地环境操作"><a href="#本地环境操作" class="headerlink" title="本地环境操作"></a>本地环境操作</h3><ul>
<li><p><code>git</code> ————————————- 查看最常用的Git命令</p>
</li>
<li><p><code>git status</code>  —————————– 查看当前仓库的状态</p>
</li>
<li><p><code>git init</code>  ——————————– 初始化 git 仓库</p>
</li>
<li><p><code>git add  [ name ]</code> ——————— 将代码加入等待提交的缓存中（防止误提交）</p>
</li>
<li><p><code>git rm –-cached [ name ]</code>  ———- 从缓存中移除</p>
</li>
<li><p><code>git commit -m [ message ]</code> ——— 提交附带提交信息</p>
</li>
<li><p><code>git log</code>  ———————————- 查看commit记录</p>
</li>
<li><p><code>git branch</code> ——————————- 查看当前分支情况</p>
</li>
<li><p><code>git branch [ name ]</code> ——————- 创建新分支</p>
</li>
<li><p><code>git checkout [ name ]</code> —————- 切换分支</p>
</li>
<li><p><code>git checkout -b [ name ]</code> ———— 创建并切换分支</p>
</li>
<li><p><code>git merge [ name ]</code> ———————合并分支到主分支 </p>
</li>
<li><p><code>git branch -d [ name ]</code>—————- 删除分支</p>
</li>
<li><p><code>git branch -D [ name ]</code> ————— 强制删除分支</p>
</li>
<li><p><code>git tag</code> ————————————-查看版本记录</p>
</li>
<li><p><code>git tag [ version ]</code>———————新建版本信息</p>
</li>
<li><p><code>git checkout [ version ]</code>————–切换到对应的版本状态</p>
</li>
</ul>
<h3 id="本地与远程仓库协作"><a href="#本地与远程仓库协作" class="headerlink" title="本地与远程仓库协作"></a>本地与远程仓库协作</h3><ul>
<li><p><code>ssh -T git@github.com</code> ————————–查看SSH key 是否添加成功</p>
</li>
<li><p><code>git remote add origin [ url ]</code> —————建立本地目录与远程仓库的关联 ( 相当于给远程 url 取了别名 origin )</p>
</li>
<li><p><code>git remote remove origin</code> ———————-取消本地目录与远程仓库的关联 </p>
</li>
<li><p><code>git remote -v</code> ————————————–查看当前项目有哪些远程仓库</p>
</li>
<li><p><code>git push origin master</code> ————————–将本地代码提交到远程仓库 ( 需要先解决冲突 )</p>
</li>
<li><p><code>git push -f origin</code> ————————– 强制提交( 覆盖远程代码 )</p>
</li>
<li><p><code>git pull origin master</code> ————————- 更新远程仓库代码到本地</p>
</li>
<li><p><code>git clone [ url ]</code> ——————————– Clone 项目</p>
</li>
<li><p><code>git checkout [ version ]</code> ————————切换到对应的版本状态</p>
</li>
<li><p><code>git config --global user.name 「 username 」</code>——- 全局设置用户名 ( 去除global 就是为某一个项目进行设置 )</p>
</li>
<li><p><code>git config --global user.email 「 email 」</code>———-全局设置邮箱 ( 去除global 就是为某一个项目进行设置 )</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚学习github， 本文记录最基本的github命令， 网上教程一大把， 我简单将命令记录在此， 方便查找。&lt;/p&gt;
&lt;h3 id=&quot;本地环境操作&quot;&gt;&lt;a href=&quot;#本地环境操作&quot; class=&quot;headerlink&quot; title=&quot;本地环境操作&quot;&gt;&lt;/a&gt;本地环境
    
    </summary>
    
      <category term="工具" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="github" scheme="http://www.leozzy.com/categories/%E5%B7%A5%E5%85%B7/github/"/>
    
    
      <category term="github" scheme="http://www.leozzy.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Leo&#39;s start</title>
    <link href="http://www.leozzy.com/2017/08/31/Leo-s-start/"/>
    <id>http://www.leozzy.com/2017/08/31/Leo-s-start/</id>
    <published>2017-08-31T14:28:02.000Z</published>
    <updated>2017-08-31T07:57:30.473Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这是一篇记录-Leo-站点成立的博客"><a href="#这是一篇记录-Leo-站点成立的博客" class="headerlink" title="这是一篇记录 Leo 站点成立的博客"></a>这是一篇记录 Leo 站点成立的博客</h5><p>也许是受「帅张」和圈友的影响，终于把博客当一回事了，花了两天时间把博客草草地搭建起来， 还有许多地方不完善。 尽管之前也有想过学着写博客， 最终还是停留在口头上， 今天作为新的开始。「可能吧」里面的一篇文章：<a href="http://mp.weixin.qq.com/s/ZACwzaP9lhjluHvA-o-z2A" target="_blank" rel="external">别做口头上的学习者</a>。</p>
<p>简单叙述一下我搭建博客的流程：</p>
<ol>
<li><p>准备好 Google ( 这当然是学习必不可少的神器 )  </p>
</li>
<li><p>根据教程使用 Github + Hexo 方式搭建静态博客</p>
</li>
<li><p>修改博客主题以及对页面的一些配置</p>
</li>
<li><p>阿里云购买域名并连接 Github 博客站点</p>
</li>
<li><p>学习 Github + Git， 掌握最基本的命令</p>
</li>
<li><p>学习 Markdown 基本语法</p>
</li>
<li><p>开启博客之旅</p>
</li>
</ol>
<p>至于为什么用 Leo 作为站点的名称， 那当然是英文名啊， 这么简单。</p>
<p>告诉你们个秘密： 我写作能力是真的差。所以在这里除了记录自己的成长路线， 最重要的当然是与他人分享学习到的技术经验啊， 写作能力那只是附带的。</p>
<p>目前的技术还真的不行， 所以只能从一些基础开始分享， 自己也从小白开始成长， 渴望成为所谓的「大神」。坚持当然是最重要的一点了， 很多人是按时间来约束自己， 一个月或者一周或者每天一篇博客， 但是对于我这种小白， 我的选择是学到了东西就发一篇， 也当是对知识的整理， 除了分享给他人还有重要的一点就是把自己积累的知识记录在这里。 </p>
<p>技术源于分享， 分享阮一峰老师的一本书与大家共勉：<a href="http://survivor.ruanyifeng.com/" target="_blank" rel="external">未来世界的幸存者</a></p>
<p>附上帅照一张<br><img src="/2017/08/31/Leo-s-start/leo.jpg" alt="This is Leo" title="This is Leo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;这是一篇记录-Leo-站点成立的博客&quot;&gt;&lt;a href=&quot;#这是一篇记录-Leo-站点成立的博客&quot; class=&quot;headerlink&quot; title=&quot;这是一篇记录 Leo 站点成立的博客&quot;&gt;&lt;/a&gt;这是一篇记录 Leo 站点成立的博客&lt;/h5&gt;&lt;p&gt;也许是受「帅
    
    </summary>
    
      <category term="时光" scheme="http://www.leozzy.com/categories/%E6%97%B6%E5%85%89/"/>
    
    
      <category term="时光" scheme="http://www.leozzy.com/tags/%E6%97%B6%E5%85%89/"/>
    
  </entry>
  
</feed>
